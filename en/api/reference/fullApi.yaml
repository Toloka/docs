openapi: 3.0.1
servers:
  - url: 'https://sandbox.toloka.dev/api/v1'
    description: Toloka sandbox server URL.
  - url: 'https://toloka.dev/api/v1'
    description: Toloka default server URL.
info:
  title: Toloka API
  version: '1.0'
  description:
    $ref: './parts/api/info-description.md'
security:
  - api_key1: []
tags:
  - name: project
    description: |
      Set the properties of tasks and responses in the project:

      - Input data parameters. Describe the objects to display in the task, such as images or text.

      - Output data parameters. These parameters describe Tolokers' responses. They are used for validating the responses entered: the data type (integer, string, etc.), range of values, string length, and so on.

      - Task interface. Defines the appearance of the task for Tolokers and the logic for processing responses.

      ### See also

      - [More information about projects](https://toloka.ai/docs/guide/project/)
  - name: pool
    description: |
      A pool consists of task suites that are sent out for completion at the same time. In the pool properties, you set the task price, overlap, [Toloker selection filters](https://toloka.ai/docs/api/filters/), [quality control rules](https://toloka.ai/docs/api/quality_control/), and so on.

      If the project has multiple pools, the order for completing them depends on the parameters:

      - Pools with identical filter settings and price per task are assigned to Tolokers in the order in which they were started. The pool that was started earlier will be completed sooner. You can [change the order](https://toloka.ai/docs/api/api-reference/#post-/pools) for completing the pools.

      - Pools with different filter settings and/or a different price per task are sent out for completion when the [pool opens](https://toloka.ai/docs/api/api-reference/#post-/pools/-id-/open).

      <aside class="note">Wait for the operation completion (changing its <a href="https://toloka.ai/docs/api/api-reference/#get-/operations/-id-">status</a> to <code>SUCCESS</code> or <code>FAIL</code>) before performing any other operation except <a href="https://toloka.ai/docs/api/api-reference/#post-/pools">pool creation</a>.</aside>

      ### See also

      - [More information about pools](https://toloka.ai/docs/guide/pool-main/)
  - name: training
    description: |
      A training pool includes unpaid task suites. The training pool must be
      linked to the main pool.

      After completing the training pool, the annotator is assigned a skill
      equal to the percentage of correct responses. If the percentage is higher
      than or equal to the **Level required** value in the linked pool, the
      annotator gets access to the main pool.

      ### See also

      - [Adding a training](https://toloka.ai/docs/guide/train/)
  - name: webhook-subscription
    description: |
      You can create a subscription and receive notifications from Toloka when
      certain events occur, for example:

      - When a pool closes.
      - When a task's status changes to a specified one.
      - When an aggregated score appears after dynamic overlap.

      The events that you want to be notified about are set when [creating a
      subscription](https://toloka.ai/docs/api/api-reference/#put-/webhook-subscriptions).

      Notifications about the events you're subscribed to are sent in JSON
      format. For a description of notification data, see [Notification format](https://toloka.ai/docs/api/using-webhook-subscriptions/).
  - name: skill
    description: |
      A skill is an assessment of some aspect of a Toloker's responses (a number
      from **0** to **100**). You can set up skill calculation in a [quality control rule](https://toloka.ai/docs/api/quality_control/), or manually set the skill level for a Toloker. You can use
      skills to [select Tolokers](https://toloka.ai/docs/api/filter-skill/) who perform pool tasks.

      ### See also

      - [More information about skills](https://toloka.ai/docs/guide/nav/)
  - name: user-restriction
    description: |
      You can block a Toloker's access to one or more projects. This lets you
      control which Tolokers will complete tasks. For example, you can select Tolokers
      with a skill value lower than N and block their access to tasks. You can
      also unblock access.

      ### See also

      - [Ban](https://toloka.ai/docs/guide/ban/?form-source=api-ban)
  - name: task
    description: |
      In order to upload tasks to a pool, you need to create JSON objects that
      contain:

      - The input data for the tasks (such as text or image URLs).
      - Correct responses (for control tasks).
      - Hints (for training tasks).

      Toloka automatically combines tasks into suites. You only need to specify
      the number of tasks to include in each suite (the `mixer_config` key in
      the [pool](https://toloka.ai/docs/api/api-reference/#tag--pools)).


      If you want to create the task suites yourself, follow the instructions in the
      [Task suite](https://toloka.ai/docs/api/api-reference/#tag--task-suite) section.

      ### See also

      - [Adding tasks to a pool](https://toloka.ai/docs/guide/pool/)
      - [How to upload tasks](https://toloka.ai/docs/guide/task_upload/)
  - name: task-suite
    description: |
      A task suite is a set of tasks grouped on a single web page. If the tasks
      are simple, you can add 10&ndash;20 tasks per suite. Don't make task
      suites too long because it slows down the loading speed for annotators.

      - To create a task suite, upload JSON containing:
      - Input data for tasks (such as text or image URLs).
      - Correct responses (for control tasks).
      - Hints (for training tasks).
      - Parameters for assigning tasks.

      ### See also

      - [Ways to group tasks in suites](https://toloka.ai/docs/guide/distribute-tasks-by-pages/)
  - name: operation
    description: |
      Some API requests ([opening](https://toloka.ai/docs/api/api-reference/#post-/pools/-id-/open) and [closing](https://toloka.ai/docs/api/api-reference/#post-/pools/-id-/close) a pool, archiving a [pool](https://toloka.ai/docs/api/api-reference/#post-/pools/-id-/archive) or [project](https://toloka.ai/docs/api/api-reference/#post-/projects/-id-/archive), [loading task suites](https://toloka.ai/docs/api/api-reference/#post-/task-suites), [issuing bonuses](https://toloka.ai/docs/api/api-reference/#post-/user-bonuses)) are processed as asynchronous operations that run in the background. Operation details (for example, status and creation time) are passed in the JSON format.

      You can use the API for tracking the operation progress.
  - name: assignment
    description: |
      You can get:

      - [Responses](https://toloka.ai/docs/api/api-reference/#get-/assignments) for the pool's task suites and their properties.

      - [Files uploaded by Tolokers](https://toloka.ai/docs/api/api-reference/#tag--attachments).

      - [Aggregated responses](https://toloka.ai/docs/api/api-reference/#tag--aggregated-solutions).

      ### See also

      - [Receiving responses](https://toloka.ai/docs/guide/result-of-eval/)
  - name: attachment
    description: |
      Files uploaded by Tolokers are saved in Toloka.

      ### See also

      - [Receiving responses](https://toloka.ai/docs/guide/result-of-eval/)
  - name: aggregated-solution
    description: |
      Aggregate accepted responses for tasks with an overlap in a pool of 2 or
      more to get the final response with the degree of confidence.

      You can aggregate responses in two ways:

      - Yes — Aggregate responses by skill (`WEIGHTED_DYNAMIC_OVERLAP`).
      - No — Aggregate responses using the Dawid-Skene method (`DAWID_SKENE`).

      The Dawid-Skene aggregation model works with control and training tasks as
      well as with general tasks. Responses specified for control tasks might
      not match the actual responses to the task if Tolokers often submit an
      incorrect response to it.

      The Dawid-Skene aggregation model automatically evaluates `|L|²`
      parameters for each Toloker, where L is the number of different
      aggregation values. Note that these parameters are determined
      automatically and are only used in calculations.

      Because the Dawid-Skene method evaluates `|L|²` parameters for each
      Toloker, we don't recommend using it when the Toloker labels `< |L|²`
      tasks. In this case, the quality of aggregation may be poor.

      Aggregation via the interface and via the API works differently. When
      using the Dawid-Skene aggregation model, you can't aggregate more than one
      field via the API. You can only do that via the interface.

      ### See also

      - [Aggregation of results](https://toloka.ai/docs/guide/result-aggregation/)
      - [Crowd-Kit: commonly-used aggregation methods](https://toloka.ai/docs/crowd-kit/)
  - name: user-bonus
    description: |
      You can issue bonuses to one or more Tolokers (in addition to payment for
      completed tasks).

      The bonus amount can be from $0.005 to $100 per Toloker per time.

      ### See also

      - [Bonuses](https://toloka.ai/docs/guide/bonus/)
  - name: message-thread
    description: |
      Send messages to Tolokers. You can specify recipients in a list or select
      annotators using a filter.

      The sent message is added to a new message thread. Until the first
      response is received, the message chain is located in the `UNREAD` folder.
      If the thread contains several addresses and one of them responds, a new
      message thread will be created.

      ### See also

      - [Communication](https://toloka.ai/docs/guide/messaging/)
  - name: user-metadata
    description: |
      Toloka allows you to get some information about the Tolokers whose ID you know.

      This information includes the data which the Toloker specifies in their profile and the metadata which the platform receives from the Toloker device and software installed.
  - name: requester
    description: You can display your current account balance and name using the method below.
paths:
  /aggregated-solutions/aggregate-by-pool:
    post:
      tags:
        - aggregated-solution
      operationId: aggregateSolutionsByPool
      summary: Aggregate responses in pool
      description: |
        Starts aggregating responses to all completed tasks in the pool.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>5</strong> requests of this kind per minute, <strong>30</strong> requests per hour, and <strong>200</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also:

        - [Toloka-Kit recipe: Aggregate responses in pool](https://toloka.ai/docs/toloka-kit/recipes/aggregate-responses/)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: The aggregation used for the results.
              oneOf:
                - $ref: '#/components/schemas/DawidSkeneAggregatedSolutionFormV1'
                - $ref: '#/components/schemas/WeightedDynamicOverlapAggregatedSolutionFormV1'
            examples:
              $ref: './requests/api/aggregated-solution-body-pool.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-aggregated-solutions-aggregate-by-pool.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/aggregated-solution-pool.yaml'
          description: Created
  /aggregated-solutions/aggregate-by-task:
    post:
      tags:
        - aggregated-solution
      summary: Aggregate responses to single task
      description: Starts aggregating responses to a single task.
      operationId: aggregateSolutionsByTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: The aggregation used for the results.
              oneOf:
                - $ref: '#/components/schemas/DawidSkeneAggregatedSolutionFormV1'
                - $ref: '#/components/schemas/WeightedDynamicOverlapAggregatedSolutionFormV1'
            examples:
              $ref: './requests/api/aggregated-solution-body-pool.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-aggregated-solutions-aggregate-by-task.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedSolutionViewV1'
              examples:
                $ref: './responses/api/aggregated-solution-id.yaml'
          description: Created
  '/aggregated-solutions/{operationId}':
    get:
      tags:
        - aggregated-solution
      summary: Get list of aggregated results
      description: |
        Gets results of aggregation of responses from Tolokers.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>5</strong> requests of this kind per minute, <strong>30</strong> requests per hour, and <strong>200</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>
      operationId: getAggregatedSolutions
      parameters:
        - name: sort
          description: |
            The parameters for sorting in ascending order:

            - `task_id` — Task ID.

            To change the sorting direction to descending, add a hyphen before the parameter: `sort=-task_id`.
          in: query
          example: task_id
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: task_id_gt
          description: |
            Aggregated responses associated with the tasks with an ID greater
            than the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: task_id_gte
          description: |
            Aggregated responses associated with the tasks with an ID greater
            than or equal to the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: task_id_lt
          description: |
            Aggregated responses associated with the tasks with an ID less than
            the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: task_id_lte
          description: |
            Aggregated responses associated with the tasks with an ID less than
            or equal to the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: operationId
          description: The ID of the operation.
          in: path
          required: true
          example: 5c04458e-63c1-46c1-ba0d-6f0756a5358b
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-aggregated-solutions-operationId.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1AggregatedSolutionViewV1'
              examples:
                $ref: './responses/api/aggregated-solution-list.yaml'
          description: OK
  '/assignments/{id}':
    get:
      tags:
        - assignment
      summary: Get response by ID
      description: |
        Gets the properties of the response with the ID specified in the
        request.

        You can get the response ID from the [list of responses](#get-/assignments).
      operationId: getAssignment
      parameters:
        - name: id
          description: The ID of the response for which you want to get the detailed information.
          in: path
          required: true
          example: 00022cfa46--637cf4098ccdeb4a260737de
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-assignments-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentViewV1'
              examples:
                $ref: './responses/api/assignment-id.yaml'
          description: OK
    patch:
      tags:
        - assignment
      summary: Update response
      description: |
        Updates the properties of the response with the ID specified in the
        request.

        You can manually check tasks and reject responses of poor quality. To accept or reject the received responses, change the status of the task suite using a `PATCH` request to the `/assignments/{id}` resource:

        - Accept responses: change `SUBMITTED` to `ACCEPTED`.
        - Reject responses: change `SUBMITTED` to `REJECTED`.
        - Change a rejection decision: change `REJECTED` to `ACCEPTED`.

        To resend the rejected tasks to be completed by other Tolokers, add a quality control rule to the pool (see [Recompletion of assignments](https://toloka.ai/docs/api/restore-task-overlap/)).

        ### See also

        - [Reviewing Tolokers' responses](https://toloka.ai/docs/guide/accept/)
        - [Toloka-Kit recipe: Accept responses from Tolokers](https://toloka.ai/docs/toloka-kit/recipes/accept-responses/)
        - [Toloka-Kit recipe: Reject responses from Tolokers](https://toloka.ai/docs/toloka-kit/recipes/reject-responses/)
      operationId: patchAssignment
      parameters:
        - name: id
          description: The ID of the response you want to modify.
          in: path
          required: true
          example: 00022cfa46--637cf4098ccdeb4a260737de
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentPatchV1'
            examples:
              $ref: './requests/api/assignment-body-patch.yaml'
      x-code-samples:
        $ref: ./code-samples/api/patch-assignments-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentViewV1'
              examples:
                $ref: './responses/api/assignment-id.yaml'
          description: OK
  /assignments:
    get:
      tags:
        - assignment
      summary: Get list of responses
      description: |
        Gets responses for all the task suites in the pool.

        ### See also

        - [Toloka-Kit recipe: Get list of responses](https://toloka.ai/docs/toloka-kit/recipes/get-responses/)
      operationId: getAssignments
      parameters:
        - name: pool_id
          description: |
            You must specify either `task_id`, `pool_id`, or `task_suite_id`.

            The ID of the pool for which you want to get the responses.
          in: query
          example: 32267581
          schema:
            type: string
        - name: task_suite_id
          description: |
            You must specify either `task_id`, `pool_id`, or `task_suite_id`.

            The ID of the task suite for which you want to get the responses.
          in: query
          example: 00022cfa46--637cf4098ccdeb4a260737dc
          schema:
            type: string
        - name: task_id
          description: |
            You must specify either `task_id`, `pool_id`, or `task_suite_id`.

            The task ID in the suites that were generated automatically using “smart mixing”. You will get responses for task suites that contain the specified task.
          in: query
          example: 00022cfa46--637cf3ed6e13181a0164e5a2
          schema:
            type: string
        - name: status
          description: |
            The status of an assigned task suite. If you need to list multiple statuses, separate them with commas:

            - `ACCEPTED` — Accepted by the requester.
            - `ACTIVE` — Being picked up by a Toloker.
            - `EXPIRED` — The time for completing the tasks expired.
            - `REJECTED` — Rejected by the requester.
            - `SKIPPED` — Skipped by the Toloker.
            - `SUBMITTED` — Completed but not checked.
          in: query
          example: ACTIVE
          schema:
            type: string
        - name: user_id
          description: The ID of the Toloker whose responses you want to get.
          in: query
          example: 1ad097faba0eff85a04fe30bc04d53db
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — ID of the assignment.
            - `created` — The UTC date and time when the task suite was assigned.
            - `submitted` — The UTC date and time when the task suite was completed.
            - `skipped` — The UTC date and time when the task suite was skipped.
            - `expired` — The UTC date and time when the task suite expired.
            - `accepted` — The UTC date and time when the task suite was accepted by the requester.
            - `rejected` — The UTC date and time when the task suite was rejected by the requester.

            <aside class="note">All dates use the ISO 8601 format: <code>YYYY-MM-DDThh:mm:ss[.sss]</code>.</aside>

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Assignments with an ID greater than the specified value.
          in: query
          example: 000010913d--61ee656da2d62b2b566851f6
          schema:
            type: string
        - name: id_gte
          description: Assignments with an ID greater than or equal to the specified value.
          in: query
          example: 000010913d--61ee656da2d62b2b566851f6
          schema:
            type: string
        - name: id_lt
          description: Assignments with an ID less than the specified value.
          in: query
          example: 000010913d--61ee656da2d62b2b566851f6
          schema:
            type: string
        - name: id_lte
          description: Assignments with an ID less than or equal to the specified value.
          in: query
          example: 000010913d--61ee656da2d62b2b566851f6
          schema:
            type: string
        - name: created_gt
          description: Assignments created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Assignments created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Assignments created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Assignments created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_gt
          description: Assignments created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_gte
          description: Assignments created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_lt
          description: Assignments created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_lte
          description: Assignments created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: accepted_gt
          description: Assignments accepted by the requester after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: accepted_gte
          description: |
            Assignments accepted by the requester after or on the specified
            date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: accepted_lt
          description: Assignments accepted by the requester before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: accepted_lte
          description: |
            Assignments accepted by the requester before or on the specified
            date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: rejected_gt
          description: Assignments rejected by the requester after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: rejected_gte
          description: |
            Assignments rejected by the requester after or on the specified
            date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: rejected_lt
          description: Assignments rejected by the requester before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: rejected_lte
          description: |
            Assignments rejected by the requester before or on the specified
            date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: skipped_gt
          description: Assignments skipped after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: skipped_gte
          description: Assignments skipped after or on the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: skipped_lt
          description: Assignments skipped before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: skipped_lte
          description: Assignments skipped before or on the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: expired_gt
          description: Assignments that expire after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: expired_gte
          description: Assignments that expire after or on the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: expired_lt
          description: Assignments that expire before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: expired_lte
          description: Assignments that expire before or on the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-assignments.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1AssignmentViewV1'
              examples:
                $ref: './responses/api/assignment-list.yaml'
          description: OK
  '/attachments/{id}/download':
    get:
      tags:
        - attachment
      summary: Download file
      description: |
        Downloads a file attached to a task response.

        ### See also

        - [Toloka-Kit recipe: Download attachments](https://toloka.ai/docs/toloka-kit/recipes/download-attachment/)
      operationId: downloadAttachment
      parameters:
        - name: id
          description: The ID of the file you want to download.
          in: path
          required: true
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-attachments-id-download.yaml
      responses:
        '200':
          description: OK
  '/attachments/{id}':
    get:
      tags:
        - attachment
      summary: Get file metadata
      description: |
        Gets the properties of a file attached to a task response.

        You can get the file ID from the [list of files](#get-/attachments).
      operationId: getAttachment
      parameters:
        - name: id
          description: The ID of the file for which you want to get the detailed information.
          in: path
          required: true
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-attachments-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentViewV1'
              examples:
                $ref: './responses/api/attachment-id.yaml'
          description: OK
  /attachments:
    get:
      tags:
        - attachment
      summary: Get list of files
      description: |
        Gets the list of files saved in Toloka.

        ### See also

        - [Toloka-Kit recipe: Get list of files in responses](https://toloka.ai/docs/toloka-kit/recipes/get-attachments/)
      operationId: getAttachments
      parameters:
        - name: pool_id
          description: |
            You must specify either `pool_id` or `assignment_id`.

            The ID of the pool for which you want to get the attachment files.
          in: query
          example: 1085757
          schema:
            type: string
        - name: assignment_id
          description: |
            You must specify either `pool_id` or `assignment_id`.

            The ID of the response for which you want to get the attachment files.
          in: query
          example: 000010913d--61ee656da2d62b2b566851f6
          schema:
            type: string
        - name: name
          description: |
            The file name.
          in: query
          example: "ExampleAttachment.txt"
          schema:
            type: string
        - name: type
          description: |
            The attachment type. Currently the key can have only one value — `ASSIGNMENT_ATTACHMENT`.
          in: query
          example: ASSIGNMENT_ATTACHMENT
          schema:
            type: string
        - name: user_id
          description: |
            The ID of the Toloker who uploaded the file(s).
          in: query
          example: 1ad097faba0eff85a04fe30bc04d53db
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — The file identifier.
            - `created` — The UTC date and time when the file was uploaded, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Attachments with an ID greater than the specified value.
          in: query
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
        - name: id_gte
          description: Attachments with an ID greater than or equal to the specified value.
          in: query
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
        - name: id_lt
          description: Attachments with an ID less than the specified value.
          in: query
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
        - name: id_lte
          description: Attachments with an ID less than or equal to the specified value.
          in: query
          example: 0983459b-e26f-42f3-a5fd-6e3feee913e7
          schema:
            type: string
        - name: created_gt
          description: Attachments created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Attachments created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Attachments created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Attachments created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-attachments.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1AttachmentViewV1'
              examples:
                $ref: './responses/api/attachment-list.yaml'
          description: OK
  '/message-threads/{id}/add-to-folders':
    post:
      tags:
        - message-thread
      summary: Add message thread
      description: |
        Adds a message thread to a folder.

        - Message threads added to the `UNREAD` folder are marked as **unread** in
        the interface.

        - Message threads added to the `IMPORTANT` folder are marked as
        **important** in the interface.
      operationId: addToFolders
      parameters:
        - name: id
          description: The ID of the message thread you want to add to a folder.
          in: path
          required: true
          example: 643933af08583e0a19c2167e
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadFoldersFormV1'
            examples:
              $ref: './requests/api/message-thread-folders-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-message-threads-id-add-to-folders.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadViewV1'
              examples:
                $ref: './responses/api/message-thread-id.yaml'
          description: Created
  /message-threads/compose:
    post:
      tags:
        - message-thread
      summary: Send message
      description: |
        Sends a message to annotators.

        - Specify recipients in a list.
        - Select Tolokers using a filter.

        The sent message is added to a new [message thread](#tag--message-thread).

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>1</strong> messages per day to mass mail all your Tolokers, and <strong>100,000</strong> messages per day when targeting specific Tolokers. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Toloka-Kit recipe: Send messages](https://toloka.ai/docs/toloka-kit/recipes/send-messages/)
      operationId: composeMessageThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadComposeFormV1'
            examples:
              $ref: './requests/api/message-thread-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-message-threads-compose.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadViewV1'
              examples:
                $ref: './responses/api/message-thread-id.yaml'
          description: Created
  /message-threads:
    get:
      tags:
        - message-thread
      summary: Get list of message threads
      description: |
        Gets the list of message threads.

        ### See also

        - [Toloka-Kit recipe: Get list of message threads](https://toloka.ai/docs/toloka-kit/recipes/get-message-threads/)
      operationId: getMessageThreads
      parameters:
        - name: folder
          description: |
            Folders where the thread is located:

            - `INBOX` — Inbox.
            - `OUTBOX` — Sent.
            - `AUTOMATIC_NOTIFICATION` — Notifications.
            - `IMPORTANT` — Important.
            - `UNREAD` — Unread.

            You can specify multiple comma-separated values.
          in: query
          example: INBOX,UNREAD
          schema:
            type: string
        - name: folder_ne
          description: |
            Folders to not search for the thread:

            - `INBOX` — Inbox.
            - `OUTBOX` — Sent.
            - `AUTOMATIC_NOTIFICATION` — Notifications.
            - `IMPORTANT` — Important.
            - `UNREAD` — Unread.

            You can specify multiple comma-separated values.
          in: query
          example: OUTBOX,AUTOMATIC_NOTIFICATION
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — The ID of a task suite.
            - `created` — The task suite creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Message threads with an ID greater than the specified value.
          in: query
          example: 643933af08583e0a19c2167e
          schema:
            type: string
        - name: id_gte
          description: |
            Message threads with an ID greater than or equal to the specified
            value.
          in: query
          example: 643933af08583e0a19c2167e
          schema:
            type: string
        - name: id_lt
          description: Message threads with an ID less than the specified value.
          in: query
          example: 643933af08583e0a19c2167e
          schema:
            type: string
        - name: id_lte
          description: |
            Message threads with an ID less than or equal to the specified
            value.
          in: query
          example: 643933af08583e0a19c2167e
          schema:
            type: string
        - name: created_gt
          description: Message threads created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Message threads created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Message threads created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Message threads created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-message-threads.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1MessageThreadViewV1'
              examples:
                $ref: './responses/api/message-thread-list.yaml'
          description: OK
  '/message-threads/{id}/remove-from-folders':
    post:
      tags:
        - message-thread
      summary: Remove message thread
      description: |
        Removes a message thread from a folder.

        - Message threads removed from the `UNREAD` folder are marked as **read** in
        the interface.

        - Message threads removed from the `IMPORTANT` folder are **not** marked as
        **important** in the interface.
      operationId: removeFromFolders
      parameters:
        - name: id
          description: The ID of the message thread you want to remove from a folder.
          in: path
          required: true
          example: 643933af08583e0a19c2167e
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadFoldersFormV1'
            examples:
              $ref: './requests/api/message-thread-folders-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-message-threads-id-remove-from-folders.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadViewV1'
              examples:
                $ref: './responses/api/message-thread-id.yaml'
          description: Created
  '/message-threads/{id}/reply':
    post:
      tags:
        - message-thread
      summary: Reply to message thread
      description: |
        Replies to a message thread.

        ### See also

        - [Toloka-Kit recipe: Reply to message thread](https://toloka.ai/docs/toloka-kit/recipes/reply-to-message-thread/)
      operationId: replyMessageThread
      parameters:
        - name: id
          description: The ID of the message thread to which you want to reply.
          in: path
          required: true
          example: 643933af08583e0a19c2167e
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadReplyFormV1'
            examples:
              $ref: './requests/api/message-thread-reply-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-message-threads-id-reply.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadViewV1'
              examples:
                $ref: './responses/api/message-thread-id.yaml'
          description: Created
  '/operations/{id}':
    get:
      tags:
        - operation
      summary: Get operation by ID
      description: |
        Gets details for the operation with the ID specified in the request.

        You can get the operation ID from the [list of operations](#get-/operations).

        The response doesn't provide a detailed error description. If an error has occurred, request the [operation log](#get-/operations/-id-/log).
      operationId: getOperation
      parameters:
        - name: id
          description: The ID of the operation for which you want to get the detailed information.
          in: path
          required: true
          schema:
            type: string
            example: 57068577e4b0bf7b07a0256f
      x-code-samples:
        $ref: ./code-samples/api/get-operations-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/operation-id.yaml'
          description: OK
  '/operations/{id}/log':
    get:
      tags:
        - operation
      summary: Get operation log
      description: |
        Gets the operation log.

        You can get logs for asynchronous operations (`async_mode = true`). Such
        operations run in the background.

        Logs are available only for the last month. To get the logs for an
        earlier period, contact our
        [support team](https://toloka.ai/docs/guide/troubleshooting/troubleshooting?form-source=openapi-get-operation-log).

        You can get the operation log:

        - When you create [one or multiple tasks](#post-/tasks).
        - When you create [one or multiple task suites](#post-/task-suites).
        - When [issuing bonuses to Tolokers](#post-/user-bonuses).

        If the operation was successful, the log contains the IDs of the created
        objects, otherwise it contains the details of validation errors.
      operationId: getOperationLog
      parameters:
        - name: id
          description: The ID of the operation for which you want to get the log.
          in: path
          required: true
          schema:
            type: string
            example:  57068577e4b0bf7b07a0256f
      x-code-samples:
        $ref: ./code-samples/api/get-operations-id-log.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: './parts/api/additional.yaml#/components/schemas/OperationLog'
              examples:
                $ref: './responses/api/operation-log.yaml'
          description: OK
  /operations:
    get:
      tags:
        - operation
      summary: Get list of operations
      description: Gets the list of operations.
      operationId: getOperations
      parameters:
        - name: type
          description: |
            The operation type:

            - `ANALYTICS` — Getting analytics.
            - `POOL.ARCHIVE` — Archiving a pool.
            - `POOL.CLONE` — Cloning a pool.
            - `POOL.CLOSE` — Closing a pool.
            - `POOL.OPEN` — Opening a pool.
            - `PROJECT.ARCHIVE` — Archiving the project.
            - `SOLUTION.AGGREGATE` — Aggregating a solution.
            - `TASK.BATCH_CREATE` — Bulk creating tasks.
            - `TASK_SUITE.BATCH_CREATE` — Bulk creating task suites.
            - `TRAINING.ARCHIVE` — Archiving a training pool.
            - `TRAINING.CLONE` — Cloning a training pool.
            - `TRAINING.CLOSE` — Closing a training pool.
            - `TRAINING.OPEN` — Opening the training pool.
            - `USER_BONUS.BATCH_CREATE` — Bulk issuing Toloker bonuses.
          in: query
          schema:
            type: string
            example: PROJECT.ARCHIVE
        - name: status
          description: |
            The status of the operation:

            - `PENDING` — Not started yet.
            - `RUNNING` — In progress.
            - `SUCCESS` — Completed successfully.
            - `FAIL` — Not completed.
          in: query
          schema:
            type: string
            example: SUCCESS
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — The ID of the operation.
            - `submitted` — The UTC date and time when the request was sent, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
            - `finished` — The UTC date and time when the operation was finished, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          schema:
            type: string
            example: 'id,-created'
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Operations with an ID greater than the specified value.
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: id_gte
          description: Operations with an ID greater than or equal to the specified value.
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: id_lt
          description: Operations with an ID less than the specified value.
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: id_lte
          description: Operations with an ID less than or equal to the specified value.
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: submitted_gt
          description: Operations created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_gte
          description: Operations created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_lt
          description: Operations created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: submitted_lte
          description: Operations created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: finished_gt
          description: Operations completed after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: finished_gte
          description: Operations completed after or on the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: finished_lt
          description: Operations completed before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: finished_lte
          description: Operations completed on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-operations.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1OperationViewV1'
              examples:
                $ref: './responses/api/operation-list.yaml'
          description: OK
  '/pools/{id}/archive':
    post:
      tags:
        - pool
      summary: Archive pool
      description: |
        Moves a pool to the archive.

        If a pool isn't in use, it can be moved to the archive. The pool must
        have the “closed” status.

        A pool with rejected tasks can be archived 9 days after the last task
        was rejected. This period is required to review the results if the
        annotator submits an appeal.

        Exams with automatic acceptance by accuracy, where tasks with
        insufficient accuracy are rejected, can also be archived in 9 days.

        <aside class="note">If the pool is already archived, attempting to
        archive it again returns an empty response with status
        <code>204</code>.</aside>

        ### See also

        - [Archiving a pool](https://toloka.ai/docs/guide/pool-archive/)
        - [Toloka-Kit recipe: Archive pool](https://toloka.ai/docs/toloka-kit/recipes/archive-pool/)
      operationId: archivePool
      parameters:
        - name: id
          description: The ID of the pool you want to archive.
          in: path
          example: 32267581
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-pools-id-archive.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/pool-archive-operation.yaml'
          description: Accepted
  '/pools/{id}/clone':
    post:
      tags:
        - pool
      summary: Clone pool
      description: |
        Creates a duplicate pool.


        An empty pool will be created with the same parameters.


        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>20</strong> requests of this kind per minute and <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Toloka-Kit recipe: Clone pool](https://toloka.ai/docs/toloka-kit/recipes/clone-pool/)
      operationId: clonePool
      parameters:
        - name: id
          description: The ID of the pool you want to duplicate.
          in: path
          example: 32267581
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-pools-id-clone.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/pool-clone-operation.yaml'
          description: Accepted
  '/pools/{id}/close':
    post:
      tags:
        - pool
      summary: Close pool
      description: |
        Closes the pool with the ID specified in the request.

        To stop assigning tasks to Tolokers, close the pool.

        When you send requests, an operation is created. To track the progress
        of the operation, send a request to the
        [/operations](#tag--operations) resource.

        <aside class="note">If the current pool status is the same as the
        requested status, an empty response with status <code>204</code> is
        returned.</aside>

        ### See also

        - [Toloka-Kit recipe: Close pool](https://toloka.ai/docs/toloka-kit/recipes/close-pool/)
      operationId: closePool
      parameters:
        - name: id
          description: The ID of the pool you want to close.
          in: path
          example: 32267581
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-pools-id-close.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/pool-close-operation.yaml'
          description: Accepted
  '/pools/{id}/close-for-update':
    post:
      tags:
        - pool
      summary: Close pool for editing
      description: |
        Closes a pool for editing.

        To make changes to a pool, close it before editing.

        <aside class="note">If you don't open the pool manually after editing,
        it opens automatically in 15 minutes. In this case, no checks are
        performed that can block the pool opening.</aside>

        <aside class="note">If the current pool status is the same as the
        requested status, an empty response with status <code>204</code> is
        returned.</aside>
      operationId: closePoolForUpdate
      parameters:
        - name: id
          description: The ID of the pool you want to close for editing.
          in: path
          example: 32267581
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-pools-id-close-for-update.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/pool-close-operation.yaml'
          description: Accepted
  /pools:
    get:
      tags:
        - pool
      summary: Get list of pools
      description: |
        Gets a list of created pools (including archived pools).

        ### See also

        - [Toloka-Kit recipe: Get list of pools](https://toloka.ai/docs/toloka-kit/recipes/get-pools/)
      operationId: getPools
      parameters:
        - name: status
          description: |
            The status of the pool:

            - `OPEN` — Open.
            - `CLOSED` — Closed.
            - `LOCKED` — No possible actions.
            - `ARCHIVED` — Archived.
          in: query
          example: OPEN
          schema:
            type: string
        - name: project_id
          description: The ID of the project to which the pool is attached.
          in: query
          example: 83859
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Pool ID.
            - `created` — The UTC date and time when the pool was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
            - `last_started` — The UTC date and time when the pool was last started, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Pools with an ID greater than the specified value.
          in: query
          example: 32267581
          schema:
            type: string
        - name: id_gte
          description: Pools with an ID greater than or equal to the specified value.
          in: query
          example: 32267581
          schema:
            type: string
        - name: id_lt
          description: Pools with an ID less than the specified value.
          in: query
          example: 32267581
          schema:
            type: string
        - name: id_lte
          description: Pools with an ID less than or equal to the specified value.
          in: query
          example: 32267581
          schema:
            type: string
        - name: created_gt
          description: Pools created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Pools created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Pools created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Pools created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_gt
          description: Pools that were last opened after the specified date.
          example: "2022-12-01"
          in: query
          schema:
            type: string
        - name: last_started_gte
          description: Pools that were last opened on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_lt
          description: Pools that were last opened before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_lte
          description: Pools that were last opened on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-pools.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1PoolViewV1'
              examples:
                $ref: './responses/api/pool-list.yaml'
          description: OK
    post:
      tags:
        - pool
      summary: Create pool
      description: |
        Creates a pool.

        The pool is automatically assigned an ID.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>20</strong> requests of this kind per minute and <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        <aside class="note">Learn about creating a training pool in the <a
        href="#post-/trainings">Create training pool</a> section.</aside>

        ### See also

        - [Creating a pool](https://toloka.ai/docs/guide/pool-main/)
        - [Toloka-Kit recipe: Create pool](https://toloka.ai/docs/toloka-kit/recipes/create-pool/)
      operationId: createPool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolFormV1'
            examples:
              $ref: './requests/api/pool-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-pools.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolViewV1'
              examples:
                $ref: './responses/api/pool-id.yaml'
          description: Created
  '/pools/{id}':
    get:
      tags:
        - pool
      summary: Get pool by ID
      description: |
        Gets the properties of the pool with the ID specified in the request.

        You can get the pool ID from the [list of pools](#get-/pools).

        ### See also

        - [Toloka-Kit recipe: Get pool details](https://toloka.ai/docs/toloka-kit/recipes/get-pool-by-id/)
      operationId: getPool
      parameters:
        - name: id
          description: The ID of the pool for which you want to get detailed information.
          in: path
          required: true
          example: 32267581
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-pools-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolViewV1'
              examples:
                $ref: './responses/api/pool-id.yaml'
          description: OK
    put:
      tags:
        - pool
      summary: Edit pool
      description: |
        Makes changes to the pool with the ID specified in the request.

        The pool can't be edited if it's open. [Close the
        pool](#post-/pools/-id-/close-for-update) before editing. In the request body, specify **all** the pool parameters, including those that are updated.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>10</strong> requests per hour to change the pool overlap parameters values. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        Learn about editing a training pool in the [Edit training pool](#put-/trainings/-id-) section.

        ### See also

        - [Editing a pool](https://toloka.ai/docs/guide/pool-edit/)
      operationId: updatePool
      parameters:
        - name: id
          description: The ID of the pool which you want to edit.
          in: path
          required: true
          example: 32267581
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolViewV1'
            examples:
              $ref: './responses/api/pool-id.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-pools-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolViewV1'
              examples:
                $ref: './responses/api/pool-id.yaml'
          description: OK
    patch:
      tags:
        - pool
      summary: Change pool priority
      description: |
        Changes the priority of a pool.

        If you have multiple pools and want annotators to be offered one pool
        before another, change the pool priority. You don't need to stop the
        pool for that, it must have the "open" or "closed" status.

        Priority is a number on a scale from **0** to **100**. The larger the
        number, the faster the pool will be labeled compared to your other
        pools.

        <aside class="note">If the pool is archived, an empty response with
        status <code>409</code> is returned.</aside>

        ### See also

        - [Editing a pool](https://toloka.ai/docs/guide/pool-edit/)
        - [Toloka-Kit recipe: Change pool priority](https://toloka.ai/docs/toloka-kit/recipes/change-pool-priority/)
      operationId: patchPool
      parameters:
        - name: id
          description: The ID of the pool for which you want to change the priority.
          in: path
          required: true
          example: 32267581
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPatchFormV1'
      x-code-samples:
        $ref: ./code-samples/api/patch-pools-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolViewV1'
              examples:
                $ref: './responses/api/pool-id.yaml'
          description: OK
  '/pools/{id}/open':
    post:
      tags:
        - pool
      summary: Open pool
      description: |
        Opens the pool with the ID specified in the request.

        Training tasks will be available to Tolokers only if a training pool is
        open.

        An operation is created when you send a request. To track the progress
        of the operation, send a request to the
        [/operations](#tag--operations) resource.

        <aside class="note">If the pool is already open, an empty response with
        status <code>204</code> is returned.

        If the pool cannot be opened, a response is returned with an error
        description and the status <code>409</code>.</aside>

        ### See also

        - [Toloka-Kit recipe: Open pool](https://toloka.ai/docs/toloka-kit/recipes/open-pool/)
      operationId: openPool
      parameters:
        - name: id
          description: The ID of the pool you want to open.
          in: path
          required: true
          example: 32267581
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-pools-id-open.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/pool-open-operation.yaml'
          description: Accepted
  '/projects/{id}/archive':
    post:
      tags:
        - project
      summary: Archive project
      description: |
        Sends the project to the archive.

        If a project isn't being used, you can send it to the archive. To do
        this, all the pools in the project must be
        [archived](#post-/pools/-id-/archive). You can get the project ID from
        the [list of projects](#get-/projects).

        You can check the operation status by sending requests to the `/operations` resource. For more information, see [Tracking operations](#tag--operation).

        ### See also

        - [Toloka-Kit recipe: Archive project](https://toloka.ai/docs/toloka-kit/recipes/archive-project/)
      operationId: archiveProject
      parameters:
        - name: id
          description: The project ID.
          in: path
          required: true
          schema:
            type: string
          example: '83859'
      x-code-samples:
        $ref: ./code-samples/api/post-projects-id-archive.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/project-archive-operation.yaml'
          description: Accepted
  /projects:
    get:
      tags:
        - project
      summary: Get list of projects
      description: |
        Gets the list of projects.

        ### See also

        - [Toloka-Kit recipe: Get list of projects](https://toloka.ai/docs/toloka-kit/recipes/get-projects/)
      operationId: getProjects
      parameters:
        - name: status
          in: query
          description: |
            The status of the project:

            - `ACTIVE` — Active.
            - `ARCHIVED` — Archived.
          example: ACTIVE
          schema:
            type: string
        - name: sort
          in: query
          description: |
            The parameters to sort by:

            - `id` — The project identifier.
            - `created` — The UTC date and time when the project was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
            - `public_name` — The project name.
            - `private_comment` — A comment on the project.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          example: id,-created
          schema:
            type: string
        - name: owner
          in: query
          description: The requester ID.
          schema:
            type: string
          example: 6c8a55de89cfe3ea858afcb2629de162
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
            default: 50
            maximum: 300
        - name: id_gt
          description: Projects with an ID greater than the specified value.
          in: query
          schema:
            type: string
          example: 83800
        - name: id_gte
          description: Projects with an ID greater than or equal to the specified value.
          in: query
          schema:
            type: string
          example: 83800
        - name: id_lt
          description: Projects with an ID less than the specified value.
          in: query
          schema:
            type: string
          example: 83800
        - name: id_lte
          description: Projects with an ID less than or equal to the specified value.
          in: query
          schema:
            type: string
          example: 83800
        - name: created_gt
          description: Projects created after the specified date.
          in: query
          schema:
            type: string
          example: "2022-12-01"
        - name: created_gte
          description: Projects created on or after the specified date.
          in: query
          schema:
            type: string
          example: "2022-12-01"
        - name: created_lt
          description: Projects created before the specified date.
          in: query
          schema:
            type: string
          example: "2022-12-01"
        - name: created_lte
          description: Projects created on or before the specified date.
          in: query
          schema:
            type: string
          example: "2022-12-01"
      x-code-samples:
        $ref: ./code-samples/api/get-projects.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1ProjectViewV1'
              examples:
                $ref: './responses/api/project-list.yaml'
          description: OK
    post:
      tags:
        - project
      summary: Create project
      description: |
        Creates a project with the parameters specified in the request.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>20</strong> requests of this kind per minute and a maximum of <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Create a project](https://toloka.ai/docs/guide/project/)
        - [Configuration for Template Builder](https://toloka.ai/docs/api/tb-config/)
        - [Toloka-Kit recipe: Create project](https://toloka.ai/docs/toloka-kit/recipes/create-project/)
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFormV1'
            examples:
              $ref: './requests/api/project-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-projects.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectViewV1'
              examples:
                $ref: './responses/api/project-id.yaml'
          description: Created
  '/projects/{id}':
    get:
      tags:
        - project
      summary: Get project by ID
      description: |
        Gets properties of the project with the ID specified in the request.

        You can get the project ID from the [list of projects](#get-/projects).

        ### See also

        - [Toloka-Kit recipe: Get project details](https://toloka.ai/docs/toloka-kit/recipes/get-project-by-id/)
      operationId: getProject
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the project for which you want to get detailed information.
          schema:
            type: string
          example: '83859'
      x-code-samples:
        $ref: ./code-samples/api/get-projects-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectViewV1'
              examples:
                $ref: './responses/api/project-id.yaml'
          description: OK
    put:
      tags:
        - project
      summary: Edit project
      description: |
        Edits the project with the ID specified in the request.

        In the request body, specify **all** the parameters for the project being
        updated. You can get the project ID from the [list of
        projects](#get-/projects).

        ### See also

        - [Editing a project](https://toloka.ai/docs/guide/edit-project/)
        - [Toloka-Kit recipe: Edit project](https://toloka.ai/docs/toloka-kit/recipes/edit-project/)
      operationId: updateProject
      parameters:
        - name: id
          description: The ID of the project you want to modify.
          in: path
          required: true
          schema:
            type: string
          example: '83859'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectViewV1'
            examples:
              $ref: './responses/api/project-id.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-projects-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectViewV1'
              examples:
                $ref: './responses/api/project-id.yaml'
          description: OK
  /requester:
    get:
      tags:
        - requester
      summary: Get account balance
      description: |
        Gets information about the account balance.

        The method also returns the client ID and the name displayed to Tolokers.
      operationId: getRequesterInfo
      x-code-samples:
        $ref: ./code-samples/api/get-requester.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequesterViewV1'
              examples:
                $ref: './responses/api/requester.yaml'
          description: OK
  /skills:
    get:
      tags:
        - skill
      summary: Get list of skills
      description: |
        Gets the list of created skills.

        ### See also

        - [Toloka-Kit recipe: Get skills](https://toloka.ai/docs/toloka-kit/recipes/get-skills/)
      operationId: getSkills
      parameters:
        - name: name
          description: The skill name.
          in: query
          example: "search relevance"
          schema:
            type: string
        - name: global
          description: |
            The indicator of a global skill:

            - `true` — The skill is global, shows general competencies of Tolokers, and is available to all Tolokers.
            - `false` — The skill is created by the requester and can be assigned to Tolokers both manually and automatically: using quality control rules or after training.
          in: query
          example: true
          schema:
            type: boolean
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Skill ID.
            - `created` — The skill creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Skills with an ID greater than the specified value.
          in: query
          example: 11051
          schema:
            type: string
        - name: id_gte
          description: Skills with an ID greater than or equal to the specified value.
          in: query
          example: 11051
          schema:
            type: string
        - name: id_lt
          description: Skills with an ID less than the specified value.
          in: query
          example: 11051
          schema:
            type: string
        - name: id_lte
          description: Skills with an ID less than or equal to the specified value.
          in: query
          example: 11051
          schema:
            type: string
        - name: created_gt
          description: Skills issued or created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Skills issued or created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Skills issued or created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Skills issued or created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_gt
          description: Skills modified after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_gte
          description: Skills modified on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_lt
          description: Skills modified before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_lte
          description: Skills modified on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-skills.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1SkillViewV1'
              examples:
                $ref: './responses/api/skill-list.yaml'
          description: OK
    post:
      tags:
        - skill
      summary: Create skill
      description: |
        Creates a skill.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>10</strong> requests of this kind per minute and <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Creating a skill](https://toloka.ai/docs/guide/nav-create/)
        - [Toloka-Kit recipe: Create skill](https://toloka.ai/docs/toloka-kit/recipes/create-skill/)
      operationId: createSkill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillFormV1'
            examples:
              $ref: './requests/api/skill-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-skills.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillViewV1'
              examples:
                $ref: './responses/api/skill-id.yaml'
          description: Created
  '/skills/{id}':
    get:
      tags:
        - skill
      summary: Get skill by ID
      description: |
        Gets the properties of the skill with the ID specified in the request.

        You can get the skill ID from the [list of skills](#get-/skills).
      operationId: getSkill
      parameters:
        - name: id
          description: The ID of the skill for which you want to get detailed information.
          in: path
          required: true
          example: 11051
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-skills-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillViewV1'
              examples:
                $ref: './responses/api/skill-id.yaml'
          description: OK
    put:
      tags:
        - skill
      summary: Edit skill
      description: |
        Changes the name, comment, and access to the skill.

        In the request body, specify **all** the skill parameters, including those that are updated.

        ### See also

        - [Editing a skill](https://toloka.ai/docs/guide/nav-edit/)
        - [Toloka-Kit recipe: Edit skill](https://toloka.ai/docs/toloka-kit/recipes/edit-skill/)
      operationId: updateSkill
      parameters:
        - name: id
          description: The ID of the skill you want to modify.
          in: path
          required: true
          example: 11051
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillViewV1'
            examples:
              $ref: './responses/api/skill-id.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-skills-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillViewV1'
              examples:
                $ref: './responses/api/skill-id.yaml'
          description: OK
  /task-suites:
    get:
      tags:
        - task-suite
      summary: Get list of task suites
      description: Gets the list of task suites in the pool.
      operationId: getTaskSuites
      parameters:
        - name: pool_id
          description: |
            The ID of the pool for which you want to get the list of the task suites.

            You must specify either `task_id` or `pool_id`.
          required: true
          in: query
          schema:
            type: string
          example: 1227652
        - name: task_id
          description: |
            The task ID in the suites that were generated automatically using “smart mixing”. You will get task suites that contain the specified task.

            You must specify either `task_id` or `pool_id`.
          required: true
          in: query
          schema:
            type: string
          example: 000012bb84--62d80429f20bf20e50f36a27
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — The ID of a task suite.
            - `created` — The task suite creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: overlap
          description: Task suites with an overlap equal to the specified value.
          in: query
          example: 3
          schema:
            type: integer
            format: int64
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Task suites with an ID greater than the specified value.
          in: query
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
        - name: id_gte
          description: Task suites with an ID greater than or equal to the specified value.
          in: query
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
        - name: id_lt
          description: Task suites with an ID less than the specified value.
          in: query
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
        - name: id_lte
          description: Task suites with an ID less than or equal to the specified value.
          in: query
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
        - name: created_gt
          description: Task suites created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Task suites created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Task suites created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Task suites created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: overlap_gt
          description: Task suites with an overlap greater than the specified value.
          in: query
          example: 3
          schema:
            type: string
        - name: overlap_gte
          description: Task suites with an overlap greater than or equal to the specified value.
          in: query
          example: 3
          schema:
            type: string
        - name: overlap_lt
          description: Task suites with an overlap less than the specified value.
          in: query
          example: 3
          schema:
            type: string
        - name: overlap_lte
          description: Task suites with an overlap less than or equal to the specified value.
          in: query
          example: 3
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-task-suites.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1TaskSuiteViewV1'
              examples:
                $ref: './responses/api/task-suite-list.yaml'
          description: OK
    post:
      tags:
        - task-suite
      summary: Create single/multiple task suites
      description: |
        Creates one or multiple task suites.

        <aside class="warning"><strong>Restriction</strong>. You can add a maximum of <strong>100,000</strong> task suites per minute and <strong>2,000,000</strong> task suites per day. The total size of all <code>input_values</code> fields in a single request mustn't exceed <strong>1,048,576</strong> bytes, <code>output_values</code> — <strong>4,194,304</strong> bytes.

        Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Toloka-Kit recipe: Group tasks in task suites](https://toloka.ai/docs/toloka-kit/recipes/create-task-suite/)
      operationId: createTaskSuite
      parameters:
        - name: operation_id
          description: |
            The operation ID for asynchronously loading one or more task suites (if `async_mode=true`).

            <aside class="warning">We recommend sending <code>operation_id</code> in the <code>POST</code> request to avoid accidental errors, such as creating the operation multiple times for the same task suites.</aside>

            The ID should conform to the [RFC4122 standard](https://tools.ietf.org/html/rfc4122).

            You can use this ID in the future to [get information about the operation](#get-/operations/-id-).
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: skip_invalid_items
          description: |
            Validation parameters for JSON objects:

            - `true` — Create the task suites that passed validation.
            - `false` — If at least one of the task suites didn't pass validation, stop the operation and don't create the task suites.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: allow_defaults
          description: |
            Overlap settings:

            - `true` — Use the overlap that is set in the pool parameters (in the `defaults.default_overlap_for_new_task_suites` key).
            - `false` — Use the overlap that is set in the task suite parameters (in the `overlap` field).
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: open_pool
          description: Whether to open the pool immediately after the operation is completed, if the pool is closed.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: async_mode
          description: |
            Mode for request processing:

            - `true` — Asynchronous. Creates an asynchronous operation that runs in the background. The response contains information about the operation (start and  completion time, status).
            - `false` — Synchronous. The response contains information about one or multiple task suites created.
          in: query
          example: false
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Single or multiple task suites to create.
              oneOf:
                - $ref: '#/components/schemas/TaskSuiteFormV1'
                - type: array
                  description: The array of task suites you want to create.
                  items:
                    $ref: '#/components/schemas/TaskSuiteFormV1'
            examples:
              $ref: './requests/api/task-suite-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-task-suites.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                description: The details about the task suite creation result.
                oneOf:
                  - $ref: '#/components/schemas/TaskSuiteViewV1'
                  - $ref: '#/components/schemas/PageOfTaskSuiteV1'
                  - $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/task-suite-post.yaml'
          description: Created
  '/task-suites/{id}':
    get:
      tags:
        - task-suite
      summary: Get task suite by ID
      description: |
        Gets the task suite with the ID specified in the request.

        You can get the task suite ID from the [list of task suites](#get-/task-suites).
      operationId: getTaskSuite
      parameters:
        - name: id
          description: The ID of the task suite for which you want to get detailed information.
          in: path
          required: true
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-task-suites-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSuiteViewV1'
              examples:
                $ref: './responses/api/task-suite-id.yaml'
          description: OK
    patch:
      tags:
        - task-suite
      summary: Edit task suite overlap or priority
      description: |
        Changes the task suite overlap or priority.

        - To change the task suite overlap, specify a numeric value (the `overlap` parameter) or set infinite overlap (the `infinite_overlap` parameter) to assign the
        task suite to all Tolokers (this is useful for training tasks).

        - To change the priority of the task suite in the pool, specify a numeric value for the `issuing_order_override` parameter.

        ### See also

        - [What is overlap?](https://toloka.ai/docs/guide/overlap-faq/)
        - [Toloka-Kit recipe: Change task overlap](https://toloka.ai/docs/toloka-kit/recipes/change-task-overlap/)
      operationId: patchTaskSuite
      parameters:
        - name: id
          description: The ID of the task suite for which you want to change the overlap.
          in: path
          required: true
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
        - name: open_pool
          description: Whether to open the pool immediately after the operation is completed, if the pool is closed.
          in: query
          example: true
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSuitePatchV1'
            examples:
              $ref: './requests/api/task-suite-body-patch.yaml'
      x-code-samples:
        $ref: ./code-samples/api/patch-task-suites-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSuiteViewV1'
              examples:
                $ref: './responses/api/task-suite-id.yaml'
          description: OK
  '/task-suites/{id}/set-overlap-or-min':
    patch:
      tags:
        - task-suite
      summary: Stop assigning task suite
      description: |
        Stops assigning a task suite to Tolokers and sets the task suite overlap to the minimal possible value.

        To stop assigning the task suite to Tolokers, set the overlap field to `0`.
      operationId: setOverlapOrMin
      parameters:
        - name: id
          description: The ID of the task suite you want to stop assigning.
          in: path
          required: true
          example: 000012e4ca--62eadb541b54e36b45b7a117
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSuiteOverlapPatchV1'
            examples:
              $ref: './requests/api/task-suite-body-overlap.yaml'
      x-code-samples:
        $ref: ./code-samples/api/patch-task-suites-id-set-overlap-or-min.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSuiteViewV1'
              examples:
                $ref: './responses/api/task-suite-id.yaml'
          description: OK
  /tasks:
    get:
      tags:
        - task
      summary: Get list of tasks
      description: |
        Gets the list of tasks in the pool.

        ### See also

        - [Toloka-Kit recipe: Get list of tasks](https://toloka.ai/docs/toloka-kit/recipes/get-tasks/)
      operationId: getTasks
      parameters:
        - name: pool_id
          description: The ID of the pool for which you want to get the list of the tasks.
          required: true
          in: query
          schema:
            type: string
          example: 1227652
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Task ID.
            - `created` — The task creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: overlap
          description: Tasks with an overlap equal to the specified value.
          in: query
          example: 2
          schema:
            type: integer
            format: int64
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Tasks with an ID greater than the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: id_gte
          description: Tasks with an ID greater than or equal to the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: id_lt
          description: Tasks with an ID less than the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: id_lte
          description: Tasks with an ID less than or equal to the specified value.
          in: query
          example: 000012bb84--62d80429f20bf20e50f36a27
          schema:
            type: string
        - name: created_gt
          description: Tasks created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Tasks created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Tasks created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Tasks created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: overlap_gt
          description: Tasks with an overlap greater than the specified value.
          in: query
          example: 2
          schema:
            type: string
        - name: overlap_gte
          description: Tasks with an overlap greater than or equal to the specified value.
          in: query
          example: 2
          schema:
            type: string
        - name: overlap_lt
          description: Tasks with an overlap less than the specified value.
          in: query
          example: 2
          schema:
            type: string
        - name: overlap_lte
          description: Tasks with an overlap less than or equal to the specified value.
          in: query
          example: 2
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-tasks.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1TaskViewV1'
              examples:
                $ref: './responses/api/task-list.yaml'
          description: OK
    post:
      tags:
        - task
      summary: Create single/multiple tasks
      description: |
        Creates one or multiple tasks.

        <aside class="warning"><strong>Restriction</strong>. You can add a maximum of <strong>200,000</strong> tasks per minute and <strong>4,000,000</strong> tasks per day. The total size of all <code>input_values</code> fields in a single request mustn't exceed <strong>1,048,576</strong> bytes, <code>output_values</code> — <strong>4,194,304</strong> bytes.

        Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Toloka-Kit recipe: Upload tasks](https://toloka.ai/docs/toloka-kit/recipes/upload-tasks/)
      operationId: createTask
      parameters:
        - name: operation_id
          description: |
            The operation ID for a scheduled upload of one or more tasks (if `async_mode=true` is set).

            <aside class="warning">We recommend sending <code>operation_id</code> in the <code>POST</code> request to avoid accidental errors, such as creating the operation multiple times for the same tasks.</aside>

            The ID should conform to the [RFC4122 standard](https://tools.ietf.org/html/rfc4122).

            You can use this ID in the future to [get information about the operation](#get-/operations/-id-).
          in: query
          example: 57068577e4b0bf7b07a0256f
          schema:
            type: string
        - name: skip_invalid_items
          description: |
            Validation parameters for JSON objects:

            - `true` — Create the tasks that passed validation. Skip the rest of the tasks (errors will be listed in the response to the request).
            - `false` — If one or more tasks didn't pass validation, stop the operation and don't create any tasks.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: allow_defaults
          description: |
            Overlap settings:

            - `true` — Use the overlap that is set in the pool parameters (in the `defaults.default_overlap_for_new_tasks` key).
            - `false` — Use the overlap that is set in the task parameters (in the `overlap` field).
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: open_pool
          description: Whether to open the pool immediately after the operation is completed, if the pool is closed.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: async_mode
          description: |
            The mode for request processing:

            - `true` — Asynchronous. Creates an asynchronous operation that runs in the background. The response contains information about the operation (start and completion time, status, number of task suites).
            - `false` — Synchronous. The response contains information about one or more created tasks. Maximum of 5000 tasks per request.
          in: query
          example: false
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Single or multiple tasks to create.
              oneOf:
                - $ref: '#/components/schemas/TaskFormV1'
                - type: array
                  description: The array of tasks you want to create.
                  items:
                    $ref: '#/components/schemas/TaskFormV1'
            examples:
              $ref: './requests/api/task-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-tasks.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                description: The details about the task creation result.
                oneOf:
                  - $ref: '#/components/schemas/TaskViewV1'
                  - $ref: '#/components/schemas/PageOfV1TaskViewV1'
                  - $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/task-post.yaml'
          description: Created
  '/tasks/{id}':
    get:
      tags:
        - task
      summary: Get task by ID
      description: |
        Gets the detailed data for the task with the ID specified in the
        request.

        You can get the task ID from the [list of tasks](#get-/tasks).

        ### See also

        - [Toloka-Kit recipe: Get task details](https://toloka.ai/docs/toloka-kit/recipes/get-task-by-id/)
      operationId: getTask
      parameters:
        - name: id
          description: The ID of the task for which you want to get detailed information.
          in: path
          required: true
          schema:
            type: string
          example: 000012bb84--62d80429f20bf20e50f36a27
      x-code-samples:
        $ref: ./code-samples/api/get-tasks-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskViewV1'
              examples:
                $ref: './responses/api/task-id.yaml'
          description: OK
    patch:
      tags:
        - task
      summary: Edit task
      description: |
        Changes the task overlap.

        You can:

        - Set a numeric value (the `overlap` parameter) or an infinite
        overlap (the `infinite_overlap` parameter) to assign a task to all Tolokers (for example, for
        training tasks).

        - Add preliminary responses or change their values (the `baseline_solutions` parameter) if
        they were set.

          Preliminary responses are used to calculate response confidence when dynamic overlap (incremental relabeling, IRL) is enabled.

        - Make [control](https://toloka.ai/docs/glossary/#control-task) and [training](https://toloka.ai/docs/glossary/#training-task) tasks from regular ones or edit
        responses (the `known_solutions` parameter) and hints (the `message_on_unknown_solution` parameter) for existing tasks.

        ### See also

        - [Toloka-Kit recipe: Change task overlap](https://toloka.ai/docs/toloka-kit/recipes/change-task-overlap/)
      operationId: patchTask
      parameters:
        - name: id
          description: The ID of the task for which you want to change the overlap value.
          in: path
          required: true
          schema:
            type: string
          example: 000012bb84--62d80429f20bf20e50f36a27
        - name: open_pool
          description: Whether or not to open the pool after changing the task overlap.
          in: query
          example: true
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPatchV1'
            examples:
              $ref: './requests/api/task-body-patch.yaml'
      x-code-samples:
        $ref: ./code-samples/api/patch-tasks-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskViewV1'
              examples:
                $ref: './responses/api/task-id.yaml'
          description: OK
  '/tasks/{id}/set-overlap-or-min':
    patch:
      tags:
        - task
      summary: Stop assigning task
      description: |
        Stops assigning a task to Tolokers and sets the task overlap to the minimal possible value.

        To stop assigning the task to Tolokers, set the overlap field to `0`. For tasks with infinite overlap, change
        the value of `infinite_overlap` to `false`.
      operationId: setOverlapOrMin_1
      parameters:
        - name: id
          description: The ID of the task which you want to stop assigning to Tolokers.
          in: path
          required: true
          schema:
            type: string
          example: 000012bb84--62d80429f20bf20e50f36a27
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskOverlapPatchV1'
            examples:
              $ref: './requests/api/task-body-overlap.yaml'
      x-code-samples:
        $ref: ./code-samples/api/patch-tasks-id-set-overlap-or-min.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskViewV1'
              examples:
                $ref: './responses/api/task-id.yaml'
          description: OK
  '/trainings/{id}/archive':
    post:
      tags:
        - training
      summary: Archive training pool
      description: |
        Moves a training pool to the archive.

        If a training pool isn't in use, it can be moved to the archive. Before
        archiving, check two conditions:

        - The training pool must have the “closed” status.

        - All the main pools that the training pool is linked to must be [sent
        to the archive](#post-/pools/-id-/archive).

        <aside class="note">If the training pool is already archived, attempting
        to archive it again returns an empty response with status
        <code>204</code>.</aside>
      operationId: archiveTraining
      parameters:
        - name: id
          description: The ID of the training pool you want to archive.
          in: path
          example: 1245598
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-trainings-id-archive.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/training-archive-operation.yaml'
          description: Accepted
  '/trainings/{id}/clone':
    post:
      tags:
        - training
      summary: Clone training pool
      description: |
        Creates a duplicate training pool.

        An empty training pool will be created with the same parameters.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>20</strong> requests of this kind per minute and <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>
      operationId: cloneTraining
      parameters:
        - name: id
          description: The ID of the training pool you want to duplicate.
          in: path
          required: true
          example: 1239110
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-trainings-id-clone.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/training-clone-operation.yaml'
          description: Accepted
  '/trainings/{id}/close':
    post:
      tags:
        - training
      summary: Close training
      description: |
        Closes a training pool.

        To stop assigning training tasks to Tolokers, close the training pool.

        When you send requests, an operation is created. To track the progress
        of the operation, send a request to the
        [/operations](#tag--operations) resource.

        <aside class="note">If the current training pool status is the same as
        the requested status, an empty response with status <code>204</code> is
        returned.</aside>
      operationId: closeTraining
      parameters:
        - name: id
          description: The pool ID.
          in: path
          required: true
          example: 1239110
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-trainings-id-close.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/training-close-operation.yaml'
          description: Accepted
  '/trainings/{id}/close-for-update':
    post:
      tags:
        - training
      summary: Close training for editing
      description: |
        Closes a training for editing.

        To make changes to a training pool, close it before editing.
      operationId: closeTrainingForUpdate
      parameters:
        - name: id
          description: The ID of the training pool you want to close for editing.
          in: path
          example: 123456
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-trainings-id-close-for-update.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/training-close-operation.yaml'
          description: Accepted
  /trainings:
    get:
      tags:
        - training
      summary: Get list of training pools
      description: Gets the list of created training pools (including archived pools).
      operationId: getTrainings
      parameters:
        - name: status
          description: |
            The training pool status:

            - `OPEN` — Open.
            - `CLOSED` — Closed.
            - `LOCKED` — No possible actions.
            - `ARCHIVED` — Archived.
          in: query
          example: OPEN
          schema:
            type: string
        - name: project_id
          description: The ID of the project that the training pool is linked to.
          in: query
          example: 118252
          schema:
            type: string
        - name: sort
          description: |
            The parameters for sorting in ascending order:

            - `id` — ID of the training pool.
            - `created` — The UTC date and time when the training pool was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
            - `last_started` — The UTC date and time when the training pool was last started, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Training pools with an ID greater than the specified value.
          in: query
          example: 1239110
          schema:
            type: string
        - name: id_gte
          description: |
            Training pools with an ID greater than or equal to the specified
            value.
          in: query
          example: 1239110
          schema:
            type: string
        - name: id_lt
          description: Training pools with an ID less than the specified value.
          in: query
          example: 1239110
          schema:
            type: string
        - name: id_lte
          description: Training pools with an ID less than or equal to the specified value.
          in: query
          example: 1239110
          schema:
            type: string
        - name: created_gt
          description: Training pools created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Training pools created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Training pools created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Training pools created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_gt
          description: Training pools that were last opened after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_gte
          description: Training pools that were last opened on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_lt
          description: Training pools that were last opened before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: last_started_lte
          description: |
            Training pools that were last opened on or before the specified
            date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-trainings.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1TrainingViewV1'
              examples:
                $ref: './responses/api/training-list.yaml'
          description: OK
    post:
      tags:
        - training
      summary: Create training pool
      description: |
        Creates a training pool (training).

        The pool is automatically assigned an ID.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>20</strong> requests of this kind per minute and <strong>100</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        <aside class="note">Learn about creating a main pool in the <a
        href="#post-/pools">Create pool</a> section.</aside>
      operationId: createTraining
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingFormV1'
            examples:
              $ref: './requests/api/training-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-trainings.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingViewV1'
              examples:
                $ref: './responses/api/training-id.yaml'
          description: Created
  '/trainings/{id}':
    get:
      tags:
        - training
      summary: Get training by ID
      description: |
        Gets the properties of the training pool with the ID specified in the request.

        You can get the training pool ID from the [list of training
        pools](#get-/trainings).
      operationId: getTraining
      parameters:
        - name: id
          description: The ID of the training pool for which you want to get detailed information.
          in: path
          example: 1239110
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-trainings-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingViewV1'
              examples:
                $ref: './responses/api/training-id.yaml'
          description: OK
    put:
      tags:
        - training
      summary: Edit training pool
      description: |
        Makes changes to a training pool with the ID specified in the request.

        In the request body, specify **all** the training pool parameters, including those that are updated.

        Learn about editing a main pool in the [Edit pool](#put-/pools/-id-) section.
      operationId: updateTraining
      parameters:
        - name: id
          description: The ID of the training pool you want to edit.
          in: path
          required: true
          example: 1239110
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingViewV1'
            examples:
              $ref: './responses/api/training-id.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-trainings-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingViewV1'
              examples:
                $ref: './responses/api/training-id.yaml'
          description: OK
  '/trainings/{id}/open':
    post:
      tags:
        - training
      summary: Open training
      description: |
        Opens a training pool with the ID specified in the request.

        Training tasks will be available to Tolokers only if a training pool is
        open.

        An operation is created when you send a request. To track the progress
        of the operation, send a request to the
        [/operations](#tag--operations) resource.

        <aside class="note">If the current training pool status is the same as
        the requested status, an empty response with status <code>204</code> is
        returned.</aside>
      operationId: openTraining
      parameters:
        - name: id
          description: The ID of the training pool you want to open.
          in: path
          required: true
          example: 1239110
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-trainings-id-open.yaml
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationViewV1'
              examples:
                $ref: './responses/api/training-open-operation.yaml'
          description: Accepted
  /user-bonuses:
    get:
      tags:
        - user-bonus
      summary: Get list of bonuses
      description: |
        Gets a list of bonuses issued.

        ### See also

        - [Toloka-Kit recipe: Get list of all bonuses issued](https://toloka.ai/docs/toloka-kit/recipes/get-rewards/)
      operationId: getUserBonuses
      parameters:
        - name: user_id
          description: The ID of the Toloker for whom you want to view all the bonuses.
          in: query
          example: a1b0b42923c429daa2c764d7ccfc364d
          schema:
            type: string
        - name: assignment_id
          description: The ID of the Toloker's response to the task a bonus is issued for.
          in: query
          example: 000015fccc--63bfc4c358d7a46c32a7b233
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Bonus ID.
            - `created` — The UTC date and time when the bonus was awarded, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Bonuses with an ID greater than the specified value.
          in: query
          example: 3139
          schema:
            type: string
        - name: id_gte
          description: Bonuses with an ID greater than or equal to the specified value.
          in: query
          example: 3139
          schema:
            type: string
        - name: id_lt
          description: Bonuses with an ID less than the specified value.
          in: query
          example: 3139
          schema:
            type: string
        - name: id_lte
          description: Bonuses with an ID less than or equal to the specified value.
          in: query
          example: 3139
          schema:
            type: string
        - name: created_gt
          description: Bonuses issued after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Bonuses issued on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Bonuses issued before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Bonuses issued on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-bonuses.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1UserBonusViewV1'
              examples:
                $ref: './responses/api/user-bonus-list.yaml'
          description: OK
    post:
      tags:
        - user-bonus
      summary: Issue bonuses
      description: |
        Issues bonuses to Tolokers.

        The bonus amount can be from $0.005 to $100 per Toloker per time.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>10,000</strong> requests per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Toloka-Kit recipe: Issue bonuses to Tolokers](https://toloka.ai/docs/toloka-kit/recipes/assign-reward/)
      operationId: createUserBonus
      parameters:
        - name: async_mode
          description: |
            The mode for request processing:

            - `true` — Asynchronous. Creates an asynchronous operation that runs in the background. The response contains information about the operation (start and completion time, status, number of bonuses).
            - `false` — Synchronous. The response contains information about bonuses issued. Maximum of 100 bonuses per request.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: skip_invalid_items
          description: |
            Validation parameters for JSON objects:

            - `true` — Issue a bonus if the JSON object with bonus information passed validation. Otherwise, skip the bonus.
            - `false` — Stop the operation and don't issue bonuses if at least one JSON object didn't pass validation.
          in: query
          example: true
          schema:
            type: boolean
            default: false
        - name: operation_id
          description: The operation ID. Can be used for any method of request processing.
          in: query
          example: 430fa011-6053-4664-b0b7-0c4e50ea91ed
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBonusFormV1'
            examples:
              $ref: './requests/api/user-bonus-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/post-user-bonuses.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                description: The details about the bonus issuing result.
                oneOf:
                  - $ref: '#/components/schemas/UserBonusViewV1'
                    summary: Issue single bonus
                  - $ref: '#/components/schemas/PageOfBonusV1'
                    summary: Issue bonuses synchronously
                  - $ref: '#/components/schemas/OperationViewV1'
                    summary: Issue bonuses asynchronously
              examples:
                $ref: './responses/api/user-bonus-post.yaml'
          description: Created
        '409':
          content:
            application/json:
              schema:
                type: object
              examples:
                conflict:
                  description: |
                    You can't use one request to pass multiple bonuses with the same price, name, and message to the same annotator.
                  value:
                    user_id:
                      code: ENTITY_CONFLICT
                      message: "It is not allowed to apply multiple bonuses with the same amount, title, message and comment to same Toloker in single operation"
          description: Conflict
  '/user-bonuses/{userBonusId}':
    get:
      tags:
        - user-bonus
      summary: Get bonus by ID
      description: |
        Gets the properties of the bonus with the ID specified in the request.

        You can get the bonus ID from the [list of bonuses](#get-/user-bonuses).

        ### See also

        - [Toloka-Kit recipe: Get bonus details](https://toloka.ai/docs/toloka-kit/recipes/get-reward-by-id/)
      operationId: getUserBonus
      parameters:
        - name: userBonusId
          description: The ID of the bonus issued.
          in: path
          required: true
          example: 3139
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-bonuses-userBonusId.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBonusViewV1'
              examples:
                $ref: './responses/api/user-bonus-id.yaml'
          description: OK
  '/user-metadata/{user_id}':
    get:
      tags:
        - user-metadata
      summary: Get Toloker metadata
      description: Gets metadata for the Toloker with the ID specified in the request.
      operationId: getUserMetadata
      parameters:
        - name: user_id
          description: The ID of the Toloker for whom you want to get the detailed information.
          in: path
          required: true
          example: 0060ec33ea7938162d024ef1e3cef496
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-metadata-user_id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMetadataViewV1'
              examples:
                $ref: './responses/api/user-metadata-id.yaml'
          description: OK
  '/user-restrictions/{id}':
    get:
      tags:
        - user-restriction
      summary: Get ban by ID
      description: |
        Gets information about the ban with the ID specified in the request.

        You can get the ban ID from the [list of bans](#get-/user-restrictions).
      operationId: getUserRestriction
      parameters:
        - name: id
          description: The ID of the ban for which you want to get the detailed information.
          in: path
          required: true
          schema:
            type: string
          example: 19038
      x-code-samples:
        $ref: ./code-samples/api/get-user-restrictions-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRestrictionViewV1'
              examples:
                $ref: './responses/api/user-restriction-id.yaml'
          description: OK
    delete:
      tags:
        - user-restriction
      summary: Unblock access
      description: |
        Removes a ban.

        ### See also

        - [Toloka-Kit recipe: Remove ban from Toloker](https://toloka.ai/docs/toloka-kit/recipes/delete-restriction/)
      operationId: deleteUserRestriction
      parameters:
        - name: id
          description: The ID of the ban you want to remove.
          in: path
          required: true
          schema:
            type: string
          example: 19038
      x-code-samples:
        $ref: ./code-samples/api/delete-user-restrictions-id.yaml
      responses:
        '204':
          description: No Content
  /user-restrictions:
    get:
      tags:
        - user-restriction
      summary: Get list of bans
      description: |
        Gets the list of Toloker bans.

        ### See also

        - [Toloka-Kit recipe: Get list of bans](https://toloka.ai/docs/toloka-kit/recipes/get-restrictions/)
      operationId: getUserRestrictions
      parameters:
        - name: scope
          description: |
            The scope of the ban:

            - `ALL_PROJECTS` — All the requester's projects.
            - `POOL` — A pool (specify the `pool_id`).
            - `PROJECT` — A single project (specify the `project_id`).
            - `SYSTEM` — Tolokers that performed the requester's tasks but were [banned on the platform](https://toloka.ai/docs/guide/ban/?form-source=api-ban#ban-platform).
          in: query
          example: POOL
          schema:
            type: string
        - name: user_id
          description: |
            The ID of the Toloker for whom you want to list bans.
          in: query
          example: f25a5f41-94e8-49bf-977f-3611087a16b3
          schema:
            type: string
        - name: pool_id
          description: |
            **Required** if `scope=POOL`.

            The ID of the pool that is blocked.
          in: query
          example: 32267581
          schema:
            type: string
        - name: project_id
          description: |
            **Required** if `scope=PROJECT`.

            The ID of the project that is blocked.
          in: query
          example: 83859
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — The ID.
            - `created` — The creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: User bans with an ID greater than the specified value.
          in: query
          example: 19038
          schema:
            type: string
        - name: id_gte
          description: User bans with an ID greater than or equal to the specified value.
          in: query
          example: 19038
          schema:
            type: string
        - name: id_lt
          description: User bans with an ID less than the specified value.
          in: query
          example: 19038
          schema:
            type: string
        - name: id_lte
          description: User bans with an ID less than or equal to the specified value.
          in: query
          example: 19038
          schema:
            type: string
        - name: created_gt
          description: User bans issued or created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: User bans issued or created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: User bans issued or created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: User bans issued or created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-restrictions.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1UserRestrictionViewV1'
              examples:
                $ref: './responses/api/user-restriction-list.yaml'
          description: OK
    put:
      tags:
        - user-restriction
      summary: Block access to tasks
      description: |
        Blocks a Toloker from accessing tasks.

        ### See also

        - [Toloka-Kit recipe: Ban Tolokers](https://toloka.ai/docs/toloka-kit/recipes/ban-tolokers/)
      operationId: upsertUserRestriction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRestrictionFormV1'
            examples:
              $ref: './requests/api/user-restriction-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-user-restrictions.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRestrictionViewV1'
              examples:
                $ref: './responses/api/user-restriction-id.yaml'
          description: OK
  '/user-skills/{id}':
    get:
      tags:
        - skill
      summary: Get Toloker skill by ID
      description: |
        Gets a Toloker's skill value.

        You can get the Toloker skill ID from the [list of skills](#get-/user-skills).
      operationId: getUserSkill
      parameters:
        - name: id
          description: The ID of a Toloker's skill that is assigned to the "skill-Toloker" pair. You can find this ID using the [Get a list of Tolokers who have skills](#get-/user-skills) request.
          in: path
          required: true
          example: 54116339
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-skills-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSkillViewV1'
              examples:
                $ref: './responses/api/user-skill-id.yaml'
          description: OK
    delete:
      tags:
        - skill
      summary: Remove skill from Toloker
      description: |
        Removes a skill from a Toloker.

        ### See also

        - [Remove a skill](https://toloka.ai/docs/guide/nav-delete/)
        - [Toloka-Kit recipe: Remove skill from Toloker](https://toloka.ai/docs/toloka-kit/recipes/delete-user-skill/)
      operationId: deleteUserSkill
      parameters:
        - name: id
          description: The ID of a Toloker's skill that is assigned to the "skill-Toloker" pair. You can find this ID using the [Get a list of Tolokers who have skills](#get-/user-skills) request.
          in: path
          required: true
          example: 54116339
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/delete-user-skills-id.yaml
      responses:
        '204':
          description: No Content
  /user-skills:
    get:
      tags:
        - skill
      summary: Get list of Toloker skills
      description: |
        Gets a list of Tolokers who have skills. With the query parameters, you can filter the data in the response the following way:

        - Get the **list of all the Tolokers** who have the specific skill using the `skill_id` query parameter:

            ```http
            GET https://toloka.dev/api/v1/user-skills?skill_id=<skill_id>
            ```

        - Get the **list of all the skills** assigned to the specific Toloker using the `user_id` query parameter:

            ```http
            GET https://toloka.dev/api/v1/user-skills?user_id=<user_id>
            ```

        ### See also

        - [Toloka-Kit recipe: List Tolokers with skills](https://toloka.ai/docs/toloka-kit/recipes/get-user-skills/)
      operationId: getUserSkills
      parameters:
        - name: user_id
          description: The Toloker ID. It is used to get the list of the skills assigned to the specific Toloker.
          in: query
          example: 566ec2b0ff0deeaae5f9d500
          schema:
            type: string
        - name: skill_id
          description: The skill ID. It is used to get the list of the Tolokers who have the specific skill.
          in: query
          example: 32
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Skill value ID.
            - `created` — The UTC date and time when the skill was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
            - `modified` — The UTC date and time when the skill was changed, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
          in: query
          example: id,-created
          schema:
            type: string
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: User skills with an ID greater than the specified value.
          in: query
          example: 32
          schema:
            type: string
        - name: id_gte
          description: User skills with an ID greater than or equal to the specified value.
          in: query
          example: 32
          schema:
            type: string
        - name: id_lt
          description: User skills with an ID less than the specified value.
          in: query
          example: 32
          schema:
            type: string
        - name: id_lte
          description: User skills with an ID less than or equal to the specified value.
          in: query
          example: 32
          schema:
            type: string
        - name: created_gt
          description: User skills issued or created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: User skills issued or created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: User skills issued or created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: User skills issued or created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_gt
          description: User skills modified after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_gte
          description: User skills modified on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_lt
          description: User skills modified before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: modified_lte
          description: User skills modified on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-user-skills.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1UserSkillViewV1'
              examples:
                $ref: './responses/api/user-skill-list.yaml'
          description: OK
    put:
      tags:
        - skill
      summary: Set skill
      description: |
        Sets the skill value.

        <aside class="warning"><strong>Restriction</strong>: You can send a maximum of <strong>100,000</strong> requests of this kind per day. Refer to the <a href="#overview--rate-limiting">Rate limiting</a> section for the complete list of the request limitations in Toloka API.</aside>

        ### See also

        - [Assigning the skill](https://toloka.ai/docs/guide/nav-assign/)
        - [Editing a skill](https://toloka.ai/docs/guide/nav-edit/)
        - [Toloka-Kit recipe: Assign skill to Toloker](https://toloka.ai/docs/toloka-kit/recipes/assign-skill/)
      operationId: upsertUserSkill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSkillFormV1'
            examples:
              $ref: './requests/api/user-skill-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-user-skills.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSkillViewV1'
              examples:
                $ref: './responses/api/user-skill-id.yaml'
          description: OK
  /webhook-subscriptions:
    get:
      tags:
        - webhook-subscription
      summary: Get list of subscriptions
      description: Gets data for multiple active subscriptions.
      operationId: getWebhookSubscriptions
      parameters:
        - name: event_type
          description: |
            The type of events for which you want to get notifications.

            Acceptable values:

            - `ASSIGNMENT_APPROVED` — A task was completed by the Toloker and approved by the requester.
            - `ASSIGNMENT_CREATED` — A task is created.
            - `ASSIGNMENT_EXPIRED` — A task was taken by the Toloker who failed to complete it within the time allowed or rejected it before it expired.
            - `ASSIGNMENT_REJECTED` — A task was completed by the Toloker but rejected by the requester.
            - `ASSIGNMENT_SKIPPED` — A task was taken by the Toloker who then skipped it and won't return to it.
            - `ASSIGNMENT_SUBMITTED` — A task is completed and waiting for acceptance by the requester.
            - `DYNAMIC_OVERLAP_COMPLETED` — An aggregated result appeared after dynamic overlap.
            - `POOL_CLOSED` — The pool is closed.
          in: query
          example: DYNAMIC_OVERLAP_COMPLETED
          schema:
            type: string
        - name: pool_id
          description: The ID of the pool that subscription information is requested for.
          example: 32267581
          in: query
          schema:
            type: string
        - name: sort
          description: |
            The parameters to sort by:

            - `id` — Subscription ID.
            - `created` — The subscription creation UTC date and time, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.

            To learn how to configure sorting, see [Sorting responses](#overview--sorting-responses).
        - name: limit
          description: The limit on the number of results to return.
          in: query
          example: 100
          schema:
            type: integer
            format: int64
        - name: id_gt
          description: Subscriptions with an ID greater than the specified value.
          in: query
          example: 62ee14ada451956b21388859
          schema:
            type: string
        - name: id_gte
          description: |
            Subscriptions with an ID greater than or equal to the specified
            value.
          in: query
          example: 62ee14ada451956b21388859
          schema:
            type: string
        - name: id_lt
          description: Subscriptions with an ID less than the specified value.
          in: query
          example: 62ee14ada451956b21388859
          schema:
            type: string
        - name: id_lte
          description: Subscriptions with an ID less than or equal to the specified value.
          in: query
          example: 62ee14ada451956b21388859
          schema:
            type: string
        - name: created_gt
          description: Subscriptions created after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_gte
          description: Subscriptions created on or after the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lt
          description: Subscriptions created before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
        - name: created_lte
          description: Subscriptions created on or before the specified date.
          in: query
          example: "2022-12-01"
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-webhook-subscriptions.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfV1WebhookSubscriptionViewV1'
              examples:
                $ref: './responses/api/webhook-list.yaml'
          description: OK
    put:
      tags:
        - webhook-subscription
      summary: Create subscription
      description: |
        Creates one or more subscriptions with the parameters specified in the
        request.
      operationId: createSubscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookSubscriptionFormV1'
            examples:
              $ref: './requests/api/webhook-body.yaml'
      x-code-samples:
        $ref: ./code-samples/api/put-webhook-subscriptions.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionViewV1'
              examples:
                $ref: './responses/api/webhook-id.yaml'
          description: OK
  '/webhook-subscriptions/{id}':
    get:
      tags:
        - webhook-subscription
      summary: Get subscription by ID
      description: |
        Gets the properties of the subscription with the ID specified in the request.

        You can get the training subscription ID from the [list of subscriptions](#get-/webhook-subscriptions).
      operationId: getSubscription
      parameters:
        - name: id
          description: The ID of the subscription for which you want to get detailed information.
          in: path
          example: 62ee14ada451956b21388859
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/get-webhook-subscriptions-id.yaml
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionViewV1'
              examples:
                $ref: './responses/api/webhook-id.yaml'
          description: OK
    delete:
      tags:
        - webhook-subscription
      summary: Delete subscription
      description: Deletes the subscription with the ID specified in the request.
      operationId: deleteSubscription
      parameters:
        - name: id
          description: The ID of the subscription you want to delete.
          in: path
          example: 62ee14ada451956b21388859
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/delete-webhook-subscriptions-id.yaml
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
  '/webhook-subscriptions/{id}/test':
    post:
      tags:
        - webhook-subscription
      summary: Send test notification
      description: Sends a test notification to the URL specified in the subscription.
      operationId: sendTestWebhook
      parameters:
        - name: id
          description: The ID of the subscription to which you want to send test notification.
          in: path
          example: 62ee14ada451956b21388859
          required: true
          schema:
            type: string
      x-code-samples:
        $ref: ./code-samples/api/post-webhook-subscriptions-id-test.yaml
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookPushResultView'
              examples:
                $ref: './responses/api/webhook-test.yaml'
          description: Created
components:
  securitySchemes:
    api_key1:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    WebhookSubscriptionFormV1:
      required:
        - event_type
        - pool_id
        - webhook_url
      type: object
      description: The subscription that you want to create or modify.
      properties:
        event_type:
          type: string
          description: |
            The event type.

            Acceptable values:

            - `ASSIGNMENT_APPROVED` — A task was completed by the Toloker and approved by the requester.
            - `ASSIGNMENT_CREATED` — A task is created.
            - `ASSIGNMENT_EXPIRED` — A task was taken by the Toloker who failed to complete it within the time allowed or rejected it before it expired.
            - `ASSIGNMENT_REJECTED` — A task was completed by the Toloker but rejected by the requester.
            - `ASSIGNMENT_SKIPPED` — A task was taken by the Toloker who then skipped it and won't return to it.
            - `ASSIGNMENT_SUBMITTED` — A task is completed and waiting for acceptance by the requester.
            - `DYNAMIC_OVERLAP_COMPLETED` — An aggregated result appeared after dynamic overlap.
            - `POOL_CLOSED` — The pool is closed.
          enum:
            - ASSIGNMENT_APPROVED
            - ASSIGNMENT_CREATED
            - ASSIGNMENT_EXPIRED
            - ASSIGNMENT_REJECTED
            - ASSIGNMENT_SKIPPED
            - ASSIGNMENT_SUBMITTED
            - DYNAMIC_OVERLAP_COMPLETED
            - POOL_CLOSED
            - TEST_EVENT
          example: ASSIGNMENT_CREATED
        webhook_url:
          type: string
          description: The URL that notifications will be sent to.
          example: "https://example.com/toloka-webhook"
        pool_id:
          type: string
          description: The ID of the pool that the subscription was created for.
          example: "1080020"
        secret_key:
          type: string
          description: A secret key with which you can check whether incoming requests were sent through the Toloka API. For more information, see [Event authentication](https://toloka.ai/docs/api/authentication/).
          example: "12345"
    WebhookSubscriptionViewV1:
      type: object
      description: The detailed information about the subscription.
      properties:
        id:
          type: string
          description: The ID of the subscription. Generated automatically.
        created:
          type: string
          description: |
            The UTC date and time when the subscription was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        event_type:
          type: string
          description: |
            The event type.

            Acceptable values:

            - `ASSIGNMENT_APPROVED` — A task was completed by the Toloker and approved by the requester.
            - `ASSIGNMENT_CREATED` — A task is created.
            - `ASSIGNMENT_EXPIRED` — A task was taken by the Toloker who failed to complete it within the time allowed or rejected it before it expired.
            - `ASSIGNMENT_REJECTED` — A task was completed by the Toloker but rejected by the requester.
            - `ASSIGNMENT_SKIPPED` — A task was taken by the Toloker who then skipped it and won't return to it.
            - `ASSIGNMENT_SUBMITTED` — A task is completed and waiting for acceptance by the requester.
            - `DYNAMIC_OVERLAP_COMPLETED` — An aggregated result appeared after dynamic overlap.
            - `POOL_CLOSED` — The pool is closed.
          enum:
            - ASSIGNMENT_APPROVED
            - ASSIGNMENT_CREATED
            - ASSIGNMENT_EXPIRED
            - ASSIGNMENT_REJECTED
            - ASSIGNMENT_SKIPPED
            - ASSIGNMENT_SUBMITTED
            - DYNAMIC_OVERLAP_COMPLETED
            - POOL_CLOSED
            - TEST_EVENT
        webhook_url:
          type: string
          description: The URL that notifications will be sent to.
        pool_id:
          type: string
          description: The ID of the pool that the subscription was created for.
    PageOfV1WebhookSubscriptionViewV1:
      type: object
      description: The list of subscriptions and their properties in the `items` array.
      properties:
        items:
          type: array
          description: An array of objects with the information about the requested subscriptions.
          items:
            $ref: '#/components/schemas/WebhookSubscriptionViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    WebhookPushResultView:
      type: object
      description: The information about the test notification result.
      properties:
        success:
          type: boolean
          description: |
            The request execution status.
        responseReceivedAt:
          type: string
          description: |
            The UTC date and time when the subscription was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        errorType:
          type: string
          description: |
            The error type.

            Acceptable values:

            - `CONNECTION_ERROR` — Connection error.
            - `INTERNAL_ERROR` — Internal error.
            - `REQUEST_TIMEOUT` — Request timeout.
            - `TOO_MANY_CONNECTIONS` — Connection limit exceeded.
            - `UNKNOWN` — Unknown error.
            - `WRONG_STATUS_CODE` — Invalid status code.
          enum:
            - CONNECTION_ERROR
            - INTERNAL_ERROR
            - REQUEST_TIMEOUT
            - TOO_MANY_CONNECTIONS
            - UNKNOWN
            - WRONG_STATUS_CODE
        originalStatusCode:
          type: integer
          description: The status code of the response from the subscription URL.
          format: int32
        uuids:
          type: array
          description: The array of unique event numbers.
          items:
            type: string
    ObjectNode:
      type: object
    OperationViewV1:
      type: object
      description: The detailed information about the operation.
      properties:
        id:
          type: string
          description: The ID of the operation.
          example: 57068577e4b0bf7b07a0256f
        type:
          type: string
          description: |
            The operation type:

            - `ANALYTICS` — Getting analytics.
            - `POOL.ARCHIVE` — Archiving a pool.
            - `POOL.CLONE` — Cloning a pool.
            - `POOL.CLOSE` — Closing a pool.
            - `POOL.OPEN` — Opening a pool.
            - `PROJECT.ARCHIVE` — Archiving the project.
            - `SOLUTION.AGGREGATE` — Aggregating a solution.
            - `TASK.BATCH_CREATE` — Bulk creating tasks.
            - `TASK_SUITE.BATCH_CREATE` — Bulk creating task suites.
            - `TRAINING.ARCHIVE` — Archiving a training pool.
            - `TRAINING.CLONE` — Cloning a training pool.
            - `TRAINING.CLOSE` — Closing a training pool.
            - `TRAINING.OPEN` — Opening the training pool.
            - `USER_BONUS.BATCH_CREATE` — Bulk issuing Toloker bonuses.
          enum:
            - ANALYTICS
            - POOL.ARCHIVE
            - POOL.CLONE
            - POOL.CLOSE
            - POOL.OPEN
            - PROJECT.ARCHIVE
            - SOLUTION.AGGREGATE
            - TASK_SUITE.BATCH_CREATE
            - TASK.BATCH_CREATE
            - TRAINING.ARCHIVE
            - TRAINING.CLONE
            - TRAINING.CLOSE
            - TRAINING.OPEN
            - USER_BONUS.BATCH_CREATE
        status:
          type: string
          description: |
            The status of the operation:

            - `PENDING` — Not started yet.
            - `RUNNING` — In progress.
            - `SUCCESS` — Completed successfully.
            - `FAIL` — Not completed.
          enum:
            - PENDING
            - RUNNING
            - SUCCESS
            - FAIL
        submitted:
          type: string
          description: |
            The UTC date and time when the request was sent, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        started:
          type: string
          description: |
            The UTC date and time when the operation started, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        finished:
          type: string
          description: |
            The UTC date and time when the operation was completed, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        progress:
          type: integer
          description: The percentage of the operation completed.
          format: int32
        parameters:
          $ref: './parts/api/additional.yaml#/components/schemas/ParametersObjectNode'
        details:
          $ref: './parts/api/additional.yaml#/components/schemas/DetailsObjectNode'
    AbstractAggregatedSolutionFormV1:
      required:
        - pool_id
        - type
      type: object
      properties:
        type:
          type: string
          description: |
            The result aggregation method:

            - `DAWID_SKENE` — Aggregation of responses in a pool without dynamic overlap. The `answer_weight_skill_id` key for this aggregation type is ignored.
            - `WEIGHTED_DYNAMIC_OVERLAP` — Aggregation of responses in a pool based on the Toloker's skill.
          enum:
            - DAWID_SKENE
            - WEIGHTED_DYNAMIC_OVERLAP
          example: DAWID_SKENE
        pool_id:
          type: string
          description: The ID of the pool for which the results were aggregated.
          example: 1491600
        task_id:
          type: string
          description: The ID of the task for which the results were aggregated.
          example: 000016c290--64382dfc97aa9547ff8a2299
      discriminator:
        propertyName: type
    DawidSkeneAggregatedSolutionFormV1:
      required:
        - fields
        - pool_id
        - type
      type: object
      description: The `DAWID_SKENE` aggregation
      allOf:
        - $ref: '#/components/schemas/AbstractAggregatedSolutionFormV1'
        - type: object
          properties:
            fields:
              maxItems: 1
              minItems: 0
              type: array
              items:
                $ref: '#/components/schemas/Field'
    Field:
      required:
        - name
      type: object
      description: |
        [Output data fields](https://toloka.ai/docs/guide/result-aggregation/) to use for aggregating responses. For best results, each of these fields must have a limited number of response options.
      properties:
        name:
          type: string
          description: |
            **Required** if dynamic overlap is used.

            The output data field name.
          example: "result"
    WeightedDynamicOverlapAggregatedSolutionFormV1:
      required:
        - answer_weight_skill_id
        - fields
        - pool_id
        - type
      type: object
      description: The `WEIGHTED_DYNAMIC_OVERLAP` aggregation
      allOf:
        - $ref: '#/components/schemas/AbstractAggregatedSolutionFormV1'
        - type: object
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/Field'
            answer_weight_skill_id:
              type: string
              description: A skill that determines the weight of the Toloker's response.
              example: "12648"
    AggregatedSolutionViewV1:
      type: object
      description: The detailed information about the aggregation result.
      properties:
        confidence:
          type: number
          description: The confidence in the aggregated results.
          format: double
        pool_id:
          type: string
          description: The ID of the pool for which the results were aggregated.
        task_id:
          type: string
          description: The ID of the task for which the results were aggregated.
        output_values:
          type: object
          description: Output data fields and aggregated results.
    PageOfV1AggregatedSolutionViewV1:
      type: object
      description: The list of aggregation results and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of aggregation results and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/AggregatedSolutionViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    AdditionalLanguage:
      type: object
      properties:
        language:
          type: string
          description: The target language.
          enum:
            - AA
            - AB
            - AE
            - AF
            - AK
            - AM
            - AN
            - AR
            - AS
            - AV
            - AY
            - AZ
            - BA
            - BE
            - BG
            - BH
            - BI
            - BM
            - BN
            - BO
            - BR
            - BS
            - CA
            - CE
            - CH
            - CO
            - CR
            - CS
            - CU
            - CV
            - CY
            - DA
            - DE
            - DV
            - DZ
            - EE
            - EL
            - EN
            - EO
            - ES
            - ET
            - EU
            - FA
            - FF
            - FI
            - FJ
            - FO
            - FR
            - FY
            - GA
            - GD
            - GL
            - GN
            - GU
            - GV
            - HA
            - HE
            - HI
            - HO
            - HR
            - HT
            - HU
            - HY
            - HZ
            - IA
            - ID
            - IE
            - IG
            - II
            - IK
            - ID
            - IO
            - IS
            - IT
            - IU
            - HE
            - JA
            - YI
            - JV
            - KA
            - KG
            - KI
            - KJ
            - KK
            - KL
            - KM
            - KN
            - KO
            - KR
            - KS
            - KU
            - KV
            - KW
            - KY
            - LA
            - LB
            - LG
            - LI
            - LN
            - LO
            - LT
            - LU
            - LV
            - MG
            - MH
            - MI
            - MK
            - ML
            - MN
            - MR
            - MS
            - MT
            - MY
            - NA
            - NB
            - ND
            - NE
            - NG
            - NL
            - NN
            - 'NO'
            - NR
            - NV
            - NY
            - OC
            - OJ
            - OM
            - OR
            - OS
            - PA
            - PI
            - PL
            - PS
            - PT
            - PT-BR
            - QU
            - RM
            - RN
            - RO
            - RU
            - RW
            - SA
            - SC
            - SD
            - SE
            - SG
            - SI
            - SK
            - SL
            - SM
            - SN
            - SO
            - SQ
            - SR
            - SS
            - ST
            - SU
            - SV
            - SW
            - TA
            - TE
            - TG
            - TH
            - TI
            - TK
            - TL
            - TN
            - TO
            - TR
            - TS
            - TT
            - TW
            - TY
            - UG
            - UK
            - UR
            - UZ
            - VE
            - VI
            - VO
            - WA
            - WO
            - XH
            - YI
            - YO
            - ZA
            - ZH
            - ZH-HANS
            - ZU
        public_name:
          type: object
          description: |
            The translation of the project name.

            The translation source:

            - `REQUESTER` — The requester set the value themselves.
          properties:
            source:
              type: string
              example: "<source text>"
              description: The source value of the project name.
            value:
              type: string
              example: "<target text>"
              description: The target value of the project name.
        public_description:
          type: object
          description: |
            The translation of the project description.

            The translation source:

            - `REQUESTER` — The requester set the value themselves.
          properties:
            source:
              type: string
              example: "<source text>"
              description: The source value of the project description.
            value:
              type: string
              example: "<target text>"
              description: The target value of the project description.
        public_instructions:
          type: object
          description: |
            The translation of instructions for completing tasks.

            The translation source:

            - `REQUESTER` — The requester set the value themselves.
          properties:
            source:
              type: string
              example: "<source text>"
              description: The source value of the project instructions.
            value:
              type: string
              example: "<target text>"
              description: The target value of the project instructions.
        tb_view_spec:
          type: object
          description: The translation of the task interface.
          properties:
            keys:
              type: array
              description: |
                Keys with the translation of the task interface elements.

                The translation source:

                - `REQUESTER` — The requester set the value themselves.
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: "<key name>"
                    description: The task interface key name.
                  source:
                    type: string
                    example: "<source text>"
                    description: The source value of the task interface key.
                  value:
                    type: string
                    example: "<target text>"
                    description: The target value of the task interface key.
        message_on_unknown_solution:
          $ref: '#/components/schemas/LocalizedValue'
    AssignmentViewV1:
      type: object
      description: The detailed information about the response.
      properties:
        id:
          type: string
          description: The ID of the assignment to a Toloker.
        task_suite_id:
          type: string
          description: The ID of a task suite.
        pool_id:
          type: string
          description: The ID of the pool that the task suite belongs to.
        user_id:
          type: string
          description: The ID of the Toloker who was assigned the task suite.
        status:
          type: string
          description: |
            The status of an assigned task suite:

            - `ACCEPTED` — Accepted by the requester.
            - `ACTIVE` — Being picked up by a Toloker.
            - `EXPIRED` — The time for completing the tasks expired.
            - `REJECTED` — Rejected by the requester.
            - `SKIPPED` — Skipped by the Toloker.
            - `SUBMITTED` — Completed but not checked.
          enum:
            - ACCEPTED
            - ACTIVE
            - EXPIRED
            - REJECTED
            - SKIPPED
            - SUBMITTED
        reward:
          type: number
          description: The payment received by the Toloker.
        tasks:
          type: array
          description: Data for the tasks.
          items:
            $ref: '#/components/schemas/RawTask'
        first_declined_solution_attempt:
          type: array
          description: |
            For training tasks. The Toloker's first responses in the training task (only if these were the wrong answers). If the Toloker answered correctly on the first try, the `first_declined_solution_attempt` array is omitted.

            Arrays with the responses (`output_values`) are arranged in the same order as the task data in the tasks array.

            ```json
            {
              "output_values": {
                "<field 1>": <response>,
                "<field 2>": <response>
                ...
                "<field N>": <response>
              },
              ...
            }
            ```
          items:
            $ref: '#/components/schemas/RawSolution'
        solutions:
          type: array
          description: |
            Toloker responses. Arranged in the same order as the data for tasks in the tasks array.

            ```json
            {
              "output_values": {
                "<field 1>": <response>,
                "<field 2>": <response>
                ...
                "<field N>": <response>
              },
              ...
            }
            ```
          items:
            $ref: '#/components/schemas/RawSolution'
        public_comment:
          type: string
          description: |
            A comment for the Toloker.

            Maximum length: 2048 characters.
        mixed:
          type: boolean
          default: false
          description: |
            The type of operation for creating a task suite:

            - `true` — Automatic ("smart mixing").
            - `false` — Manual.

            More information about [creating task suites](https://toloka.ai/docs/guide/pool-main/).
        automerged:
          type: boolean
          description: |
            The flag of the response received as a result of [merging identical tasks](https://toloka.ai/docs/api/tasks/#task-merge). Value:

            - `true` — The response was recorded when identical tasks were merged.
            - `false` — A normal Toloker response.
        created:
          type: string
          description: |
            The UTC date and time when the task suite was assigned to a Toloker, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        submitted:
          type: string
          description: |
            The UTC date and time when the task suite was completed by a Toloker, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        accepted:
          type: string
          description: |
            The UTC date and time when the responses for the task suite were accepted by the requester, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        rejected:
          type: string
          description: |
            The UTC date and time when the responses for the task suite were rejected by the requester, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        skipped:
          type: string
          description: |
            The UTC date and time when the task suite was skipped by a Toloker, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        expired:
          type: string
          description: |
            The UTC date and time when the task suite expired, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        owner:
          $ref: '#/components/schemas/Owner'
        bonus_ids:
          type: array
          description: |
            The IDs of bonuses issued for the task.
          items:
            type: string
    LocalizationConfig:
      type: object
      description: |
        The block of translations to other languages.

        For more information about translation, see [Translations to other languages](https://toloka.ai/docs/guide/project-languages/).
      properties:
        default_language:
          type: string
          description: The source language used in the `public_name`, `public_description`, and `public_instructions` fields.
          example: EN
          enum:
            - AA
            - AB
            - AE
            - AF
            - AK
            - AM
            - AN
            - AR
            - AS
            - AV
            - AY
            - AZ
            - BA
            - BE
            - BG
            - BH
            - BI
            - BM
            - BN
            - BO
            - BR
            - BS
            - CA
            - CE
            - CH
            - CO
            - CR
            - CS
            - CU
            - CV
            - CY
            - DA
            - DE
            - DV
            - DZ
            - EE
            - EL
            - EN
            - EO
            - ES
            - ET
            - EU
            - FA
            - FF
            - FI
            - FJ
            - FO
            - FR
            - FY
            - GA
            - GD
            - GL
            - GN
            - GU
            - GV
            - HA
            - HE
            - HI
            - HO
            - HR
            - HT
            - HU
            - HY
            - HZ
            - IA
            - ID
            - IE
            - IG
            - II
            - IK
            - ID
            - IO
            - IS
            - IT
            - IU
            - HE
            - JA
            - YI
            - JV
            - KA
            - KG
            - KI
            - KJ
            - KK
            - KL
            - KM
            - KN
            - KO
            - KR
            - KS
            - KU
            - KV
            - KW
            - KY
            - LA
            - LB
            - LG
            - LI
            - LN
            - LO
            - LT
            - LU
            - LV
            - MG
            - MH
            - MI
            - MK
            - ML
            - MN
            - MR
            - MS
            - MT
            - MY
            - NA
            - NB
            - ND
            - NE
            - NG
            - NL
            - NN
            - 'NO'
            - NR
            - NV
            - NY
            - OC
            - OJ
            - OM
            - OR
            - OS
            - PA
            - PI
            - PL
            - PS
            - PT
            - PT-BR
            - QU
            - RM
            - RN
            - RO
            - RU
            - RW
            - SA
            - SC
            - SD
            - SE
            - SG
            - SI
            - SK
            - SL
            - SM
            - SN
            - SO
            - SQ
            - SR
            - SS
            - ST
            - SU
            - SV
            - SW
            - TA
            - TE
            - TG
            - TH
            - TI
            - TK
            - TL
            - TN
            - TO
            - TR
            - TS
            - TT
            - TW
            - TY
            - UG
            - UK
            - UR
            - UZ
            - VE
            - VI
            - VO
            - WA
            - WO
            - XH
            - YI
            - YO
            - ZA
            - ZH
            - ZH-HANS
            - ZU
        additional_languages:
          type: array
          description: The array of target languages.
          example:
            - FR
            - DE
          items:
            $ref: '#/components/schemas/AdditionalLanguage'
    LocalizedValue:
      type: object
      description: The hint for the task (for training tasks).
      properties:
        value:
          type: string
          description: The target value of the of the hint.
        source:
          type: string
          description: |
            The source value of the hint.

            - `REQUESTER` — The requester set the value themselves.
          enum:
            - REQUESTER
    Owner:
      type: object
      description: Parameters of the requester that created the project.
      properties:
        id:
          type: string
          description: The requester ID.
        myself:
          type: boolean
          description: |
            Checks who the object belongs to:

            - `true` — The requester whose OAuth token is specified in the request.
            - `false` — Another account (employee or owner).
        company_id:
          type: string
          description: The ID of the requester company.
    RawBaselineSolution:
      type: object
      properties:
        output_values:
          type: object
          description: |
            Output data values for preliminary responses.

              ```json
              "<ID of field 1>": "<preliminary response>",
              "<ID of field 2>": "<preliminary response>",
              ...
              ```

              <aside class="warning">The total size of all <code>output_values</code> fields in a single request mustn't exceed <strong>4,194,304</strong> bytes.</aside>
        confidence_weight:
          type: number
          default: 1
          description: The confidence in a response, from `0` to `1`.
          format: double
    RawKnownSolution:
      type: object
      properties:
        output_values:
          type: object
          description: |
            Output data values to check. You should specify values for all required output data fields.

              ```json
              "<ID of field 1>": "<correct response>",
              "<ID of field 2>": "<correct response>",
              ...
              ```

              <aside class="note">If the output field isn't required in the control task, don't specify it in the <code>known_solutions[].output_values</code> parameter.</aside>

              <aside class="warning">The total size of all <code>output_values</code> fields in a single request mustn't exceed <strong>4,194,304</strong> bytes.</aside>
        correctness_weight:
          type: number
          default: 1
          description: |
            The weight of a correct response in the range from `0` to `1`.

            Lets you count a response as partially correct. This is convenient when there is no single right response to the task.

            This works like awarding points: if you need to complete one control task correctly to get a skill (receive 1 point), you may complete one task with a weight of 1 or two tasks with a weight of 0.5 or higher.
          format: double
    RawSolution:
      type: object
      properties:
        id:
          type: string
          description: The solution ID.
        task_id:
          type: string
          description: The task ID.
        assignment_id:
          type: string
          description: The assignment ID.
        output_values:
          type: object
          description: Output data values for preliminary responses.
    RawTask:
      type: object
      properties:
        id:
          type: string
          description: Task ID if the task suite is created automatically with the "smart mixing" option (for more information, see the Requester's guide).
        input_values:
          type: object
          description: |
            Input data for a task. List of pairs:

              ```json
              "<ID of field 1>": "<value of field 1>",
              "<ID of field 2>": "<value of field 2>",
              ...
              "<ID of field N>": "<value of field N>"
              ```

              <aside class="warning">The total size of all <code>input_values</code> fields in a single request mustn't exceed <strong>1,048,576</strong> bytes.</aside>
        known_solutions:
          type: array
          description: Responses and hints for control tasks and training tasks.
          items:
            $ref: '#/components/schemas/RawKnownSolution'
        message_on_unknown_solution:
          type: string
          description: The hint for the task (for training tasks).
        baseline_solutions:
          type: array
          items:
            $ref: '#/components/schemas/RawBaselineSolution'
        localization_config:
          $ref: '#/components/schemas/LocalizationConfig'
    PageOfV1AssignmentViewV1:
      type: object
      description: The list of responses and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of responses and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/AssignmentViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    AssignmentPatchV1:
      type: object
      description: The response properties that you want to change.
      properties:
        status:
          type: string
          description: |
            The status of an assigned task suite:

            - `ACCEPTED` — Accepted by the requester.
            - `ACTIVE` — Being picked up by a Toloker.
            - `EXPIRED` — The time for completing the tasks expired.
            - `REJECTED` — Rejected by the requester.
            - `SKIPPED` — Skipped by the Toloker.
            - `SUBMITTED` — Completed but not checked.
          enum:
            - ACCEPTED
            - ACTIVE
            - EXPIRED
            - REJECTED
            - SKIPPED
            - SUBMITTED
          example: ACCEPTED
        public_comment:
          type: string
          description: |
            A comment for the Toloker.

            Maximum length: 2048 characters.
          example: OK
    AttachmentViewV1:
      type: object
      description: The detailed information about the file.
      properties:
        id:
          type: string
          description: The file ID.
        attachment_type:
          type: string
          description: The attachment type. Currently the key can have only one value — `ASSIGNMENT_ATTACHMENT`.
          enum:
            - ASSIGNMENT_ATTACHMENT
        name:
          type: string
          description: The file name.
        details:
          type: object
          description: The information about the pool, the task, and the Toloker who uploaded the file.
          properties:
            user_id:
              type: string
              description: The ID of the Toloker who uploaded the file.
            assignment_id:
              type: string
              description: The ID of the response to which this file was attached.
            pool_id:
              type: string
              description: The ID of the pool to which this file was uploaded.
        owner:
          $ref: '#/components/schemas/Owner'
        created:
          type: string
          description: 'The UTC date and time when the file was uploaded to Toloka, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
        media_type:
          type: string
          description: The MIME type of the data.
    JsonNode:
      type: object
    PageOfV1AttachmentViewV1:
      type: object
      description: The list of files and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of files and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/AttachmentViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    ComposeDetails:
      type: object
      description: |
        For messages that you sent: the details of the `POST` request used to create the message.
      properties:
        recipients_select_type:
          type: string
          description: |
            The method for selecting recipients:

            - `ALL` — Send the message to all the Tolokers who have tried to complete a task at least once.
            - `DIRECT` — Specify Toloker IDs.
            - `FILTER` — Use a filter to select Tolokers.
          enum:
            - ALL
            - DIRECT
            - FILTER
        recipients_ids:
          type: array
          description: The list of IDs of Tolokers who will receive the message.
          items:
            type: string
        recipients_filter:
          type: object
          description: The filter for selecting recipients.
    Interlocutor:
      type: object
      properties:
        id:
          type: string
          description: The ID of the sender or recipient.
        role:
          type: string
          description: |
            The role of the sender or recipient in Toloka:

            - `ADMINISTRATOR` — Admin.
            - `REQUESTER` — Requester.
            - `SYSTEM` — For messages sent automatically.
            - `USER` — Toloker.
          enum:
            - ADMINISTRATOR
            - REQUESTER
            - SYSTEM
            - USER
        myself:
          type: boolean
          description: Indicates a sender or recipient with your ID. If this is your ID, the attribute is set to `true`.
    Message:
      type: object
      properties:
        text:
          type: object
          description: The message text.
        from:
          $ref: '#/components/schemas/Interlocutor'
        created:
          type: string
          description: 'The The UTC date and time when the message was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
    MessageThreadViewV1:
      type: object
      description: The detailed information about the message thread.
      properties:
        id:
          type: string
          description: The message thread ID.
        parent_id:
          type: string
          description: The ID of the message thread which is the parent for this message thread.
        topic:
          type: object
          description: The message thread title.
        interlocutors_inlined:
          type: boolean
          description: |
            Access to the information about the sender and recipients.

            - `true` — Information is available in the `interlocutors` field.
            - `false` — Information is available in a separate request.
        interlocutors:
          type: array
          description: The information about the sender and recipients, sorted by the ID.
          items:
            $ref: '#/components/schemas/Interlocutor'
        messages_inlined:
          type: boolean
          description: |
            Access to message threads:

            - `true` — The message is available in the `messages` field.
            - `false` — The message is available in a separate request.
        messages:
          type: array
          description: Messages in the thread. The messages are sorted by the creation date (newest first).
          items:
            $ref: '#/components/schemas/Message'
        compose_details:
          $ref: '#/components/schemas/ComposeDetails'
        meta:
          $ref: '#/components/schemas/Meta'
        folders:
          uniqueItems: true
          type: array
          description: |
            The list of folders where the thread is located:

            - `AUTOMATIC_NOTIFICATION` — Notifications.
            - `IMPORTANT` — Important.
            - `INBOX` — Inbox.
            - `OUTBOX` — Sent.
            - `UNREAD` — Unread.
          items:
            type: string
            enum:
              - AUTOMATIC_NOTIFICATION
              - IMPORTANT
              - INBOX
              - OUTBOX
              - UNREAD
        answerable:
          type: boolean
          description: |
            Whether the recipient can respond to the message:

            - `true` — The Toloker can respond to the message.
            - `false` — The Toloker cannot respond to the message.
        created:
          type: string
          description: 'The UTC date and time when the first message in the thread was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
    Meta:
      type: object
      description: Additional message data.
      properties:
        pool_id:
          type: string
          description: The ID of the pool with which this message is linked.
        project_id:
          type: string
          description: The ID of the project with which this message is linked.
        assignment_id:
          type: string
          description: The ID of the assignment with which this message is linked.
    MessageThreadFoldersFormV1:
      required:
        - folders
      type: object
      description: The list of folders to add a message thread to, or remove a message thread from.
      properties:
        folders:
          uniqueItems: true
          type: array
          description: The list of folders to add a message thread to, or remove a message thread from.
          items:
            type: string
            enum:
              - AUTOMATIC_NOTIFICATION
              - IMPORTANT
              - INBOX
              - OUTBOX
              - UNREAD
            example:
              UNREAD
    MessageThreadComposeFormV1:
      required:
        - answerable
        - recipients_select_type
        - text
        - topic
      type: object
      description: The message details specified when composing a message.
      properties:
        topic:
          type: object
          description: |
            The subject of the message. You can enter the subject in multiple languages (the message is sent in the Toloker's language).

            The format:

            ```json
            {
              "EN": "Title in English",
              "DE": "Titel auf Deutsch"
            }
            ```
        answerable:
          type: boolean
          default: true
          description: |
            Whether the message can be responded to:

            - `true` — Users can respond to the message.
            - `false` — Users can't respond to the  message.
        text:
          type: object
          description: |
            The message text. You can enter the text in multiple languages (the message is sent in the Toloker's language).

            The format:

            ```json
            {
              "EN": "Message text in English",
              "DE": "Nachrichtentext in Deutsch"
            }
            ```
        recipients_select_type:
          type: string
          description: |
            The method for selecting recipients:

            - `ALL` — Send the message to all Tolokers who have tried to complete your tasks at least once.
            - `DIRECT` — Specify Toloker IDs.
            - `FILTER` — Use a filter to select Tolokers.
          enum:
            - ALL
            - DIRECT
            - FILTER
        recipients_ids:
          maxItems: 100
          minItems: 0
          type: array
          description: |
            **Required** if you set the `recipients_select_type` parameter value to `DIRECT`.

            The list of IDs of Tolokers who will receive the message.
          items:
            type: string
        recipients_filter:
          type: object
          description: |
            **Required** if you set the `recipients_select_type` parameter value to `FILTER`.

            The filter for selecting recipients.
    PageOfV1MessageThreadViewV1:
      type: object
      description: The list of message threads and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of message threads and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/MessageThreadViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    MessageThreadReplyFormV1:
      required:
        - text
      type: object
      description: The object describing the text for the reply.
      properties:
        text:
          type: object
          description: |
            The message text. You can enter the text in multiple languages (the message is sent in the Toloker's language).

            The format:

            ```json
            {
              "EN": "Message text in English",
              "DE": "Nachrichtentext in Deutsch"
            }
            ```
          example: {"EN": "Thank you very much!"}
    PageOfV1OperationViewV1:
      type: object
      description: The successful response to the request.
      properties:
        items:
          type: array
          description: The list of operations in the `items` array.
          items:
            $ref: '#/components/schemas/OperationViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    AbstractDynamicOverlapConfig:
      required:
        - type
      type: object
      description: |
        Setting up dynamic overlap (also known as incremental relabeling or IRL). Allows you to change the overlap depending on how well the Tolokers handle the task.

        Set the closing interval (`auto_close_after_complete_delay_seconds`). It should be enough to complete tasks with an overlap higher than the minimum.

        When all pool tasks are completed, [aggregate the responses](#tag--aggregated-solution).
      properties:
        type:
          type: string
          description: |
            **Required** if dynamic overlap is used.

            The algorithm for dynamic overlap.

            `BASIC` — Each response is assigned a weight depending on the Toloker's skill value. The aggregated response confidence is calculated based on the probability algorithm. The task overlap increases until it reaches `max_overlap` or until the confidence of the aggregated response exceeds `min_confidence`.

            You have to specify `max_overlap`, `min_confidence`, `answer_weight_skill_id`, and `fields`.
          enum:
            - BASIC
      discriminator:
        propertyName: type
    AbstractUsersCherryPickingConfig:
      type: object
      description: |
        [Speed/quality balance](https://toloka.ai/docs/guide/adjust).
      properties:
        type:
          type: string
          description: |
            The balance type. Possible values:

            - `BEST_CONCURRENT_USERS_BY_QUALITY` — Active Tolokers with access to the task.
            - `TOP_PERCENTAGE_BY_QUALITY` — Tolokers with the best task completion quality.
          enum:
            - BEST_CONCURRENT_USERS_BY_QUALITY
            - TOP_PERCENTAGE_BY_QUALITY
        count:
          maximum: 100
          minimum: 0
          type: integer
          format: int64
          description: |
            The field is used together with the balance `type` set to `BEST_CONCURRENT_USERS_BY_QUALITY`.

            The number of active Tolokers the task is available to.
        percent:
          maximum: 100
          minimum: 10
          type: integer
          format: int32
          description: |
            The field is used together with the balance `type` set to `TOP_PERCENTAGE_BY_QUALITY`.

            The percentage of Tolokers with the best task completion quality. Possible values are **10**, **20**, **30**, **40**...**100**.
    ActionConfigDtoV1:
      required:
        - parameters
        - type
      type: object
      description: The action to perform if conditions are met (for example, block access to the project).
      properties:
        parameters:
          required:
            - scope
          type: object
          description: The action parameters.
          properties:
            delta:
              type: integer
              description: |
                **Required** if `configs.rules.action.type` is set to `CHANGE_OVERLAP`.

                The value determines the amount to change the overlap by.
            duration:
              type: integer
              description: The ban duration value.
            duration_unit:
              type: string
              description: |
                The ban duration unit:

                - `MINUTES` — Minutes.
                - `HOURS` — Hours.
                - `DAYS` — Days.
                - `PERMANENT` — Permanent ban.
            from_field:
              type: string
              description: |
                **Required** if `configs.rules.action.type` is set to `SET_SKILL_FROM_OUTPUT_FIELD`.

                The value to assign to the skill:

                - `correct_answers_rate` — The percentage of correct responses.
                - `wrong_answers_rate` — The percentage of incorrect responses.
            open_pool:
              type: boolean
              description: |
                Determines whether to re-open a closed pool:

                - `true` — Open the pool after making changes if it is closed.
                - `false` — Don't open the pool after making changes if it is closed.
            private_comment:
              type: string
              description: Comments (the reason for blocking access). Visible only to the requester.
            public_comment:
              type: string
              description: |
                **Required** if `configs.rules.action.type` is set to `REJECT_ALL_ASSIGNMENTS`.

                Comments (the reason for rejecting responses). Available to the requester and the Toloker.
            scope:
              type: string
              description: |
                The scope:

                - `POOL` — The pool. Affects the Toloker's rating.
                - `PROJECT` — The project. Affects the Toloker's rating.
                - `ALL_PROJECTS` — All the requester's projects.
            skill_id:
              type: string
              description: |
                **Required** if `configs.rules.action.type` is set to `SET_SKILL_FROM_OUTPUT_FIELD`.

                The ID of the skill to update as tasks are completed.
            skill_value:
              type: integer
              minimum: 0
              maximum: 100
              description: |
                **Required** if `configs.rules.action.type` is set to `SET_SKILL_FROM_OUTPUT_FIELD`.

                A fixed value to assign to the skill.
        type:
          type: string
          description: |
            The type of action:

            - `RESTRICTION` — Ban access to projects or pools.
            - `SET_SKILL_FROM_OUTPUT_FIELD` — Set the “percentage of correct responses” as the skill value (used in control tasks and majority vote rules).

            You can use the skill value for filtering Tolokers.

            - `APPROVE_ALL_ASSIGNMENTS` — Accept all Toloker responses. For example, if the Toloker completes most tasks well and you are satisfied with this result.
            - `CHANGE_OVERLAP` — Change the overlap. For example, to re-assign a task suite to other Tolokers or cancel the recompletion of already accepted assignments.
            - `REJECT_ALL_ASSIGNMENTS` — Reject all Toloker responses. For example, after a certain number of Toloker responses, it became clear that the Toloker completed tasks poorly.
            - `SET_SKILL` — Assign the specified constant value to the skill.
          enum:
            - APPROVE_ALL_ASSIGNMENTS
            - CHANGE_OVERLAP
            - CLEAN_ASSIGNMENTS_HISTORY
            - CLEAN_COLLECTOR
            - REJECT_ALL_ASSIGNMENTS
            - RESTRICTION
            - RESTRICTION_V2
            - SET_POOL_COMPLETE
            - SET_SKILL
            - SET_SKILL_FROM_OUTPUT_FIELD
    AssignmentsIssuingConfig:
      type: object
      description: Settings for assigning tasks in the pool.
      properties:
        issue_task_suites_in_creation_order:
          type: boolean
          description: |
            For pools that don't use “smart mixing” .

            Assign task suites in the order in which they were uploaded. For example, for a pool with an overlap of `5`, the first task suite is assigned to five Tolokers, then the second task suite, and so on.

            This parameter is available when the project has `"assignments_issuing_type": "AUTOMATED"`.
    BasicDynamicOverlapConfig:
      required:
        - answer_weight_skill_id
        - fields
        - max_overlap
        - min_confidence
        - type
      type: object
      description: |
        Setting up dynamic overlap (also known as incremental relabeling or IRL). Allows you to change the overlap depending on how well the Tolokers handle the task.

        Set the closing interval (`auto_close_after_complete_delay_seconds`). It should be enough to complete tasks with an overlap higher than the minimum.

        When all pool tasks are completed, aggregate the responses.
      allOf:
        - $ref: '#/components/schemas/AbstractDynamicOverlapConfig'
        - type: object
          properties:
            max_overlap:
              maximum: 30000
              minimum: 1
              type: integer
              description: |
                **Required** if dynamic overlap is used.

                The maximum overlap. Must be higher than the values in `defaults`.
              format: int64
            min_confidence:
              maximum: 1
              minimum: 0
              type: number
              description: |
                **Required** if dynamic overlap is used.

                The minimum confidence of the aggregated response.
            answer_weight_skill_id:
              type: string
              description: |
                **Required** if dynamic overlap is used.

                A skill that determines the weight of the Toloker's response. For best results, use a skill calculated as the percentage of correct responses in control tasks.
            fields:
              type: array
              description: |
                **Required** if dynamic overlap is used.

                Output data fields to use for aggregating responses. For best results, each of these fields must have a limited number of response options.

                Don't specify several fields if their values depend on each other.
              items:
                $ref: '#/components/schemas/Field'
    CheckpointsConfig:
      type: object
      description: |
        The selective task review. If you want to use the majority vote quality control method, specify `MAJORITY_VOTE` in the `quality_control` parameter. Some tasks are assigned with higher overlap (for example, “5”) and checked. The rest of the tasks are assigned with the overlap set for the pool (for example, “1”) and they are not checked. Selective review lets you improve pool completion quality.

        You can reduce the frequency of checking tasks over time.

        Example of settings: in the first 100 tasks completed by the Toloker in the pool, assign every 5th task with an overlap of “5” to check matching responses. In the following tasks, every 25th task is issued with an overlap of “5”.
      properties:
        golden_settings:
          $ref: './parts/api/additional.yaml#/components/schemas/GoldenSettings'
        real_settings:
          $ref: './parts/api/additional.yaml#/components/schemas/RealSettings'
        training_settings:
          $ref: './parts/api/additional.yaml#/components/schemas/TrainingSettings'
    CollectorConfigDtoV1:
      required:
        - type
        - uuid
        - parameters
      type: object
      description: The parameters for collecting statistics (for example, the number of tasks skipped in the pool).
      properties:
        type:
          type: string
          description: |
            The criteria for the quality control rule:

            - `ACCEPTANCE_RATE` — The percentage of Toloker responses that were rejected during non-automatic acceptance.
            - `ANSWER_COUNT` — The number of task suites completed by the Toloker in the pool.
            - `ASSIGNMENT_SUBMIT_TIME` — The number of “fast” responses (the minimum response speed is set in the parameters).
            - `ASSIGNMENTS_ASSESSMENT` — The number of assignments accepted or rejected with non-automatic acceptance enabled.
            - `GOLDEN_SET` — The number of correct and incorrect responses in the control tasks.
            - `INCOME` — Payment for tasks completed by the Toloker over the past 24 hours.
            - `MAJORITY_VOTE` — The percentage of responses that matched the majority vote.
            - `SKIPPED_IN_ROW_ASSIGNMENTS` — The number of task suites skipped in a row.
            - `USERS_ASSESSMENT` — The Toloker's skill value and their bans.
          enum:
            - ACCEPTANCE_RATE
            - ANSWER_COUNT
            - ASSIGNMENT_SUBMIT_TIME
            - ASSIGNMENTS_ASSESSMENT
            - GOLDEN_SET
            - INCOME
            - MAJORITY_VOTE
            - SKIPPED_IN_ROW_ASSIGNMENTS
            - TRAINING
            - USERS_ASSESSMENT
        uuid:
          type: string
          description: The ID of the quality control rule.
        parameters:
          type: object
          description: |
            The parameters for collecting data (depends on the quality control rule specified in the `type` key).
          properties:
            answer_threshold:
              type: integer
              description: |
                Used when `configs.collector_config.type` is set to one of the following values:

                - `MAJORITY_VOTE`

                The number of Tolokers considered the majority (for example, 3 out of 5).
            fast_submit_threshold_seconds:
              type: integer
              description: |
                Used when `configs.collector_config.type` is set to one of the following values:

                - `ASSIGNMENT_SUBMIT_TIME`

                The maximum number of the Toloker's recent responses in the project to use for calculating the percentage of correct responses.

                If this field is omitted, the calculation is based on all the Toloker's responses in the pool.
            history_size:
              type: integer
              description: |
                Used when `configs.collector_config.type` is set to one of the following values:

                - `ACCEPTANCE_RATE`
                - `ASSIGNMENT_SUBMIT_TIME`
                - `ASSIGNMENTS_ASSESSMENT`
                - `GOLDEN_SET`
                - `MAJORITY_VOTE`
                - `USERS_ASSESSMENT`

                The maximum number of the Toloker's recent responses in the project to use for calculating the percentage of correct responses.

                If this field is omitted, the calculation is based on all the Toloker's responses in the pool.
    Defaults:
      required:
        - default_overlap_for_new_task_suites
      type: object
      description: The settings that are applied by default when uploading new task suites to a pool.
      properties:
        default_overlap_for_new_task_suites:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            The overlap for task suites that are uploaded to the pool (used if the `allow_defaults=true` parameter is set at upload).

            <aside class="warning">Please note that the overlap you set when <a href="#post-/task-suites">creating task suites</a> has priority over the overlap you set during the pool creation.</aside>
          format: int64
        default_overlap_for_new_tasks:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            The overlap for tasks that are uploaded to the pool (used if the `allow_defaults=true` parameter is set at upload).

            <aside class="warning">Please note that the overlap you set when <a href="#post-/tasks">uploading tasks</a> has priority over the overlap you set during the pool creation.</aside>
          format: int64
    DynamicPricingConfig:
      required:
        - intervals
        - type
      type: object
      description: The dynamic pricing settings.
      properties:
        type:
          type: string
          description: |
            **Required** if dynamic pricing is used.

            The parameter type for calculating dynamic pricing. The `SKILL` value.
          enum:
            - SKILL
        skill_id:
          type: string
          description: |
            **Required** if dynamic pricing is used.

            The ID of the skill that the task price is based on.
        intervals:
          maxItems: 10000
          minItems: 1
          type: array
          description: |
            **Required** if dynamic pricing is used.

            The skill level intervals. Must not overlap.

            A Toloker with a skill level that is not included in any interval will receive the basic price for a task suite.
          items:
            $ref: './parts/api/additional.yaml#/components/schemas/DynamicPricingInterval'
    Interval:
      type: object
      properties:
        from:
          maximum: 1000000
          minimum: 1
          type: integer
          format: int64
          default: 0
          description: |
            **Required** if either dynamic pricing or selective review is used.

            The lower bound of the interval.
        to:
          maximum: 1000000
          minimum: 1
          type: integer
          format: int64
          default: 100
          description: |
            **Required** if either dynamic pricing or selective review is used.

            The upper bound of the interval.
    MixerConfig:
      required:
        - golden_tasks_count
        - real_tasks_count
        - training_tasks_count
      type: object
      description: |
        **Required** if "smart mixing" is used.

        The parameters for automatically creating a task suite ("smart mixing"). For more information about creating task suites, see the Requester's guide.
      properties:
        force_last_assignment:
          type: boolean
          default: true
          description: |
            Setting for the last task suite in the pool, if less than the minimum remaining number of tasks are not completed (`mixer_config.min_real_tasks_count`).

            Values:

            - `true` — Assign an incomplete task suite.
            - `false` — Don't assign tasks. This option can be used if you are adding tasks after the pool is started.

            This parameter only applies to general tasks. The number of control and training tasks in the last suite must be complete (`mixer_config.golden_tasks_count`, `mixer_config.training_tasks_count`).
        force_last_assignment_delay_seconds:
          maximum: 86400
          minimum: 0
          type: integer
          description: |
            The waiting time (in seconds) after adding a task or increasing the overlap before assigning the last task suite in the pool. Minimum — **0**, maximum — **86,400** seconds (one day).

            This parameter can be used if the pool has `force_last_assignment` set to `true`.
          format: int32
        golden_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: |
            **Required** if "smart mixing" is used.

            The number of control tasks per suite.
          format: int32
        golden_task_distribution_function:
          $ref: './parts/api/additional.yaml#/components/schemas/GoldenTaskDistributionFunction'
        min_golden_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: The minimum number of control tasks per task suite (if the number of assignments left is less than the number specified in `mixer_config.golden_tasks_count`). By default, the value is the same as in `mixer_config.golden_tasks_count`.
          format: int32
        min_real_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: The minimum number of general tasks in a task suite (if the number of assignments left is less than the number specified in `mixer_config.real_tasks_count`). By default, the value is the same as in `mixer_config.real_tasks_count`.
          format: int32
        min_training_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: The minimum number of training tasks per task suite (if the number of assignments left is less than the number specified in `mixer_config.golden_tasks_count`). By default, the value is the same as in `mixer_config.training_tasks_count`.
          format: int32
        mix_tasks_in_creation_order:
          type: boolean
          default: false
          description: |
            The order used to add tasks to suites:

            - `true` — Add tasks to suites in the order in which they were uploaded. For example, in a pool with an overlap of 5, the first uploaded task will be included in the first 5 task suites. They will be assigned to 5 Tolokers.
            - `false` — Add tasks to suites in random order.
        real_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: |
            **Required** if "smart mixing" is used.

            The number of general tasks per suite.

            The maximum number of tasks per task suite if `golden_task_distribution_function` or `training_task_distribution_function` is used.
          format: int32
        shuffle_tasks_in_task_suite:
          type: boolean
          default: true
          description: |
            The order of tasks within a suite:

            - `true` — Random.
            - `false` — The order in which tasks were uploaded.
        training_tasks_count:
          maximum: 500
          minimum: 0
          type: integer
          description: |
            **Required** if "smart mixing" is used.

            The number of training tasks per suite.
          format: int32
        training_task_distribution_function:
          $ref: './parts/api/additional.yaml#/components/schemas/TrainingTaskDistributionFunction'
    OneFieldConditionDtoV1:
      required:
        - key
        - operator
        - value
      type: object
      properties:
        key:
          type: string
          description: |
            Values that are checked in the condition:

            - `accepted_assignments_count` — The number of task suites accepted after the review.
            - `accepted_assignments_rate` — The percentage of pool tasks performed by the Toloker and accepted with manual review.
            - `assignments_accepted_count` — The number of task suites completed by the Toloker.
            - `correct_answers_rate` — The percentage of correct responses in training and control tasks, or the responses that matched the majority vote (from 0 to 100).
            - `fast_submitted_count` — The number of fast responses (out of the recent ones).
            - `golden_set_answers_count` — The number of completed control tasks.
            - `golden_set_correct_answers_rate` — The percentage of correct responses in training and control tasks (from `0` to `100`).
            - `golden_set_incorrect_answers_rate` — The percentage of incorrect responses in training and control tasks (from `0` to `100`).
            - `income_sum_for_last_24_hours` — The Toloker's total earnings for tasks in the pool over the past 24 hours (in dollars).
            - `incorrect_answers_rate` — The percentage of incorrect responses in training and control tasks, or the responses that didn't match the majority vote (from 0 to 100).
            - `pending_assignments_count` — The number of task suites that are completed and awaiting review.
            - `pool_access_revoked_reason` — The reason the Toloker lost access to the pool.
            - `rejected_assignments_count` — The number of task suites rejected after the review.
            - `rejected_assignments_rate` — The percentage of pool tasks performed by the Toloker that were rejected during manual review.
            - `skipped_in_row_count` — The number of tasks skipped in a row.
            - `total_answers_count` — The number of completed control tasks or tasks that had a majority vote (when you specify the majority in `answer_threshold`).
            - `total_assignments_count` — The number of tasks in the pool that the Toloker completed.
            - `total_submitted_count` — The number of the Toloker's recent responses (less than or equal to `history_size`).

            Refer to the [Quality control rules](https://toloka.ai/docs/api/quality_control/) section for the detailed information on the `key` attribute in each quality control rule.
        operator:
          type: string
          description: |
            The comparison operator (the `key` data is compared with the threshold value from `value`):

            - `EQ` — Equal to.
            - `GT` — Greater than.
            - `GTE` — Greater than or equal to.
            - `LT` — Less than.
            - `LTE` — Less than or equal to.
            - `NE` — Not equal to.
          enum:
            - EQ
            - GT
            - GTE
            - LT
            - LTE
            - NE
        value:
          type: object
          description: The threshold value of the variable specified in `key`.
    PipelineConfigDtoV1:
      required:
        - collector_config
        - rules
      type: object
      description: "[Quality control rules](https://toloka.ai/docs/api/quality_control/)."
      properties:
        collector_config:
          $ref: '#/components/schemas/CollectorConfigDtoV1'
        rules:
          type: array
          description: Quality control rules.
          items:
            $ref: '#/components/schemas/RuleConfigDtoV1'
    PoolQualityControl:
      type: object
      description: Settings for quality control rules and the ID of the pool with training tasks.
      properties:
        captcha_frequency:
          type: string
          deprecated: true
          description: |
            The frequency of showing captchas:

            - `LOW` — Show one for every 20 tasks.
            - `MEDIUM`, `HIGH` — Show one for every 10 tasks.

            By default, captchas aren't displayed.
          enum:
            - LOW
            - MEDIUM
            - HIGH
        checkpoints_config:
          $ref: '#/components/schemas/CheckpointsConfig'
        configs:
          type: array
          description: The array of quality control settings.
          items:
            $ref: '#/components/schemas/PipelineConfigDtoV1'
        training_requirement:
          $ref: '#/components/schemas/TrainingRequirement'
    PoolViewV1:
      type: object
      description: The detailed information about the pool.
      properties:
        id:
          type: string
          description: The ID of the pool.
        project_id:
          type: string
          description: The ID of the project that the pool was created for.
        private_name:
          type: string
          description: The name of the pool (only visible to the requester).
        private_comment:
          type: string
          description: Comments on the pool (only visible to the requester).
        public_description:
          type: string
          description: The description for Tolokers. If it is filled in, the text will be displayed instead of the project's `public_description` in the list of tasks for Tolokers.
        public_instructions:
          type: string
          description: The instructions for completing the task. You can use any HTML markup in the instructions.
        may_contain_adult_content:
          type: boolean
          description: Whether the tasks contain adult content.
        will_expire:
          type: string
          description: |
            The UTC date and time when the pool needs to be closed (even if not all task suites have been completed), in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        auto_close_after_complete_delay_seconds:
          maximum: 259200
          minimum: 0
          default: 0
          type: integer
          description: |
            The waiting time (in seconds) before automatic closure of the pool after all tasks are completed. Minimum — **0**, maximum — **259,200** seconds (three days).

            Use it if:

            - Your data processing is close to real time.
            - You need an open pool where you upload tasks.
            - Dynamic overlap is enabled in the pool (`dynamic_overlap_config`).
          format: int64
        reward_per_assignment:
          minimum: 0
          type: number
          description: |
            The payment per task suite in U.S. dollars. For cents, use the dot (`"."`) as the separator. The minimum payment is **$0.01**.

            Only training and control tasks can be uploaded to zero-price pools.
        dynamic_pricing_config:
          $ref: '#/components/schemas/DynamicPricingConfig'
        metadata:
          type: object
          description: An object containing the metadata.
        assignment_max_duration_seconds:
          maximum: 2147483647
          minimum: 5
          type: integer
          description: |
            The time allowed for completing a task suite, in seconds. Tasks not completed within this time are reassigned to other Tolokers.

            We recommend allowing no more than 60 seconds per task suite (including the time for loading the page and submitting responses).
          format: int64
        auto_accept_solutions:
          type: boolean
          default: true
          description: |
            Whether the tasks must be checked manually:

            - `true` — Automatic task acceptance (manual checking isn't necessary).
            - `false` — The requester will check the tasks.
        auto_accept_period_day:
          maximum: 21
          minimum: 1
          type: integer
          description: The time (number of days) for the requester to review the task. If the requester doesn't accept or reject the task within this period, the decision will be made automatically. May take a value from 1 to 21.
          format: int32
        assignments_issuing_config:
          $ref: '#/components/schemas/AssignmentsIssuingConfig'
        filter:
          type: string
          description: The settings for [Toloker selection filters](https://toloka.ai/docs/api/filters/).
        quality_control:
          $ref: '#/components/schemas/PoolQualityControl'
        mixer_config:
          $ref: '#/components/schemas/MixerConfig'
        dynamic_overlap_config:
          $ref: '#/components/schemas/BasicDynamicOverlapConfig'
        training_config:
          $ref: '#/components/schemas/TrainingConfig'
        defaults:
          $ref: '#/components/schemas/Defaults'
        training:
          type: boolean
          description: Whether the pool is used as a training.
        priority:
          maximum: 100
          minimum: 0
          type: integer
          default: 0
          description: |
            The priority of the pool in relation to other pools in the project with the same task price and set of filters. Users are assigned tasks with a higher priority first.
          format: int64
        owner:
          $ref: '#/components/schemas/Owner'
        type:
          type: string
          deprecated: true
          description: |
            The deprecated parameter.

            The pool type. The value is always `REGULAR` indicating a normal pool.
          enum:
            - REGULAR
            - TRAINING
        status:
          type: string
          description: |
            The status of the pool:

            - `OPEN` — Open.
            - `CLOSED` — Closed.
            - `ARCHIVED` — Archived.
          enum:
            - OPEN
            - CLOSED
            - ARCHIVED
            - LOCKED
        last_close_reason:
          type: string
          description: |
            The reason for closing the pool the last time:

            - `MANUAL` — Closed by the requester.
            - `EXPIRED` — Reached the date and time set in `will_expire`.
            - `COMPLETED` — Closed automatically because all the pool tasks were completed.
            - `NOT_ENOUGH_BALANCE` — Closed automatically because the Toloka account ran out of funds.
            - `ASSIGNMENTS_LIMIT_EXCEEDED` — Closed automatically because it exceeded the limit on assigned task suites (2 million maximum).
            - `BLOCKED` — Closed automatically because the requester's account was blocked by a Toloka administrator.
            - `FOR_UPDATE` — The pool is closed for editing.
          enum:
            - MANUAL
            - EXPIRED
            - COMPLETED
            - NOT_ENOUGH_BALANCE
            - ASSIGNMENTS_LIMIT_EXCEEDED
            - BLOCKED
            - FOR_UPDATE
        created:
          type: string
          description: 'The UTC date and time when the pool was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
        last_started:
          type: string
          description: 'The UTC date and time when the pool was last started, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
        last_stopped:
          type: string
          description: 'The UTC date and time when the pool was last stopped, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
        speed_quality_balance:
          $ref: '#/components/schemas/AbstractUsersCherryPickingConfig'
    RuleConfigDtoV1:
      required:
        - action
        - conditions
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionConfigDtoV1'
        conditions:
          type: array
          description: Conditions (for example, _10 task suites skipped in a row_). Multiple conditions are combined with the `AND` operator.
          items:
            $ref: '#/components/schemas/OneFieldConditionDtoV1'
    Settings:
      required:
        - target_overlap
        - task_distribution_function
      type: object
      properties:
        target_overlap:
          minimum: 1
          type: integer
          description: |
            **Required** if selective review is used.

            The overlap in tasks with selective review.
          format: int32
        task_distribution_function:
          $ref: '#/components/schemas/TaskDistributionFunction'
    TaskDistributionFunction:
      required:
        - distribution
        - intervals
        - scope
        - window_days
      type: object
      description: |
        **Required** if selective review is used.

        The distribution of tasks with selective review. More information about [how verification tasks are assigned](https://toloka.ai/docs/guide/selective-mvote/).
      properties:
        distribution:
          type: string
          description: |
            **Required** if selective review is used.

            The distribution of tasks with selective review within an interval.
          enum:
            - UNIFORM
        intervals:
          maxItems: 10000
          minItems: 1
          type: array
          description: |
            **Required** if dynamic pricing is used.

            Skill level intervals. Must not overlap.

            A Toloker with a skill level that is not included in any interval will receive the basic price for a task suite.
          items:
            $ref: './parts/api/additional.yaml#/components/schemas/QualityControlInterval'
        scope:
          type: string
          description: |
            **Required** if selective review is used.

            How to count tasks completed by the Toloker:

            - `POOL` — Count the completed pool tasks.
            - `PROJECT` — Count the completed project tasks.
          enum:
            - POOL
            - PROJECT
        window_days:
          maximum: 365
          minimum: 1
          type: integer
          description: |
            **Required** if selective review is used.

            The period in which completed tasks are counted (number of days).
          format: int64
    TrainingConfig:
      type: object
      description: Additional settings for linked training.
      properties:
        training_skill_ttl_days:
          type: integer
          format: int64
          description: The skill expiration time measured in days.
    TrainingRequirement:
      required:
        - training_passing_skill_value
        - training_pool_id
      type: object
      description: The parameters of the training pool that is linked to the general task pool.
      properties:
        training_passing_skill_value:
          maximum: 100
          minimum: 0
          type: integer
          format: int32
          description: The percentage of correct answers in training tasks (from **0** to **100**) required in order to access the general tasks. Only the first answer of the Toloker in each task is taken into account.
        training_pool_id:
          type: string
          description: The ID of the training pool that is linked to the general task pool.
    PoolFormV1:
      required:
        - defaults
        - private_name
        - project_id
        - reward_per_assignment
        - will_expire
        - assignment_max_duration_seconds
      type: object
      description: The pool that you want to create or modify.
      properties:
        project_id:
          type: string
          description: The ID of the project that the pool was created for.
        private_name:
          type: string
          description: The name of the pool (only visible to the requester).
        private_comment:
          type: string
          description: Comments on the pool (only visible to the requester).
        public_description:
          description: The description for Tolokers. If it is filled in, the text will be displayed instead of the project's public_description in the list of tasks for Tolokers.
          type: string
        public_instructions:
          type: string
          description: The instructions for completing the task. You can use any HTML markup in the instructions.
        may_contain_adult_content:
          type: boolean
          description: Whether the tasks contain adult content.
        will_expire:
          type: string
          description: 'The UTC date and time when the pool needs to be closed (even if not all task suites have been completed), in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
        auto_close_after_complete_delay_seconds:
          maximum: 259200
          minimum: 0
          default: 0
          type: integer
          format: int64
          description: |
            The waiting time (in seconds) before automatic closure of the pool after all tasks are completed. Minimum — **0**, maximum — **259,200** seconds (three days).

            Use it if:

            - Your data processing is close to real time.
            - You need an open pool where you upload tasks.
            - Dynamic overlap is enabled in the pool (`dynamic_overlap_config`).
        reward_per_assignment:
          minimum: 0
          type: number
          description: |
            The payment per task suite in U.S. dollars. For cents, use the dot (`"."`) as the separator. The minimum payment is **$0.01**.

            Only training and control tasks can be uploaded to zero-price pools.
        dynamic_pricing_config:
          $ref: '#/components/schemas/DynamicPricingConfig'
        metadata:
          type: object
          description: An object containing the metadata.
        assignment_max_duration_seconds:
          maximum: 2147483647
          minimum: 5
          type: integer
          format: int64
          description: The time allowed for completing a task suite, in seconds. We recommend allowing no more than 60 seconds per task suite (including the time for loading the page and submitting responses).
        auto_accept_solutions:
          type: boolean
          default: true
          description: |
            Whether tasks must be checked manually:

            - `true` — Automatic task acceptance (manual checking isn't necessary).
            - `false` — The requester will check the tasks.
        auto_accept_period_day:
          maximum: 21
          minimum: 1
          type: integer
          format: int32
          description: The time (number of days) for the requester to review the task. If the requester doesn't accept or reject the task within this period, the decision will be made automatically.
        assignments_issuing_config:
          $ref: '#/components/schemas/AssignmentsIssuingConfig'
        filter:
          type: string
          description: The settings for [Toloker selection filters](https://toloka.ai/docs/api/filters/).
        quality_control:
          $ref: '#/components/schemas/PoolQualityControl'
        mixer_config:
          $ref: '#/components/schemas/MixerConfig'
        dynamic_overlap_config:
          $ref: '#/components/schemas/BasicDynamicOverlapConfig'
        training_config:
          $ref: '#/components/schemas/TrainingConfig'
        defaults:
          $ref: '#/components/schemas/Defaults'
        training:
          type: boolean
          description: Whether the pool is used as a training.
        priority:
          maximum: 100
          minimum: 0
          default: 0
          type: integer
          format: int64
          description: The priority of the pool in relation to other pools in the project with the same task price and set of filters. Tolokers are assigned tasks with a higher priority first.
        speed_quality_balance:
          $ref: '#/components/schemas/AbstractUsersCherryPickingConfig'
    PageOfV1PoolViewV1:
      type: object
      properties:
        items:
          type: array
          description: The list of pools and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/PoolViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    PoolPatchFormV1:
      type: object
      description: The pool priority to change.
      properties:
        priority:
          description: The priority of the pool in relation to other pools in the project with the same task price and set of filters. Users are assigned tasks with a higher priority first.
          maximum: 100
          minimum: 0
          type: integer
          format: int64
          default: 0
          example: 1
    AssignmentsIssuingViewConfig:
      type: object
      description: |
        **Required** if `assignments_issuing_type=MAP_SELECTOR`.

        The settings for displaying field tasks.
      properties:
        title_template:
          type: string
          description: |
            **Required** if `assignments_issuing_type=MAP_SELECTOR`.

            The name of the task. Tolokers will see it in the task preview.
        description_template:
          type: string
          description: |
            **Required** if `assignments_issuing_type=MAP_SELECTOR`.

            The description of the task. Tolokers will see it in the task preview.
        map_provider:
          type: string
          description: |
            This parameter is available when the project has `"assignments_issuing_type": "MAP_SELECTOR"`.

            The map provider for tasks:

            - `GOOGLE` — Google Maps.
            - `YANDEX` — Yandex Maps.

            If the parameter is not set, then the Toloker selects the map.
          enum:
            - GOOGLE
            - YANDEX
    LocalizedKeyValue:
      required:
        - key
        - source
        - value
      type: object
      description: The translation of the task interface.
      properties:
        value:
          type: string
          description: The target value of the task interface key.
        source:
          type: string
          description: The source value of the task interface key.
          enum:
            - REQUESTER
        key:
          type: string
          description: The task interface key name.
    LocalizedTbViewSpec:
      required:
        - keys
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedKeyValue'
    ProjectQualityControl:
      type: object
      description: The quality control rule.
      properties:
        configs:
          type: array
          description: The array of quality control settings.
          items:
            $ref: '#/components/schemas/PipelineConfigDtoV1'
    ProjectViewV1:
      description: The detailed information about the project.
      type: object
      properties:
        id:
          type: string
          example: 83859
          description: The project ID (assigned automatically).
        public_name:
          type: string
          description: The name of the project. It will be shown to Tolokers.
          example: "Elephant color (advanced)"
        public_description:
          type: string
          description: The description of the project. It will be shown to Tolokers.
          example: "What color is the elephant in the picture?"
        public_instructions:
          type: string
          description: The instructions for completing the task. You can use any HTML markup in the instructions.
          example: "<p>Look at the picture and decide what color the elephant is.</p> You can zoom in or out using the buttons:</p> <img src=\"disc/img1.png>\""
        private_comment:
          type: string
          description: The comments that are only visible to the requester.
          example: "My first project"
        task_spec:
          type: object
          $ref: ./parts/api/additional.yaml#/components/schemas/TaskSpec
        assignments_issuing_type:
          type: string
          default: AUTOMATED
          description: |
            How to assign tasks:

            - `AUTOMATED` — The Toloker is assigned a task suite from the pool. You can configure the order for assigning task suites.

            - `MAP_SELECTOR` — The Toloker selects a task suite on the map. If you are using `MAP_SELECTOR`, specify the text to display in the map name and description in the `assignments_issuing_view_config` key:

              ```json
              "assignments_issuing_view_config": {
                 "title_template": "<task name>",
                 "description_template": "<brief description of the task>",
                 "map_provider": "GOOGLE"
              }
              ```
          enum:
            - AUTOMATED
            - MAP_SELECTOR
          example: AUTOMATED
        assignments_issuing_view_config:
          $ref: '#/components/schemas/AssignmentsIssuingViewConfig'
        quality_control:
          $ref: '#/components/schemas/ProjectQualityControl'
        assignments_automerge_enabled:
          type: boolean
          default: false
          description: Resolve [merging identical tasks](https://toloka.ai/docs/api/tasks/#task-merge) in the project.
        max_active_assignments_count:
          type: integer
          description: The number of task suites the Toloker can complete simultaneously (“Active” status).
          format: int32
        metadata:
          type: object
          description: An object containing the metadata.
        sensitive:
          type: boolean
          description: Whether the tasks in the project contain sensitive data or not.
        localization_config:
          $ref: '#/components/schemas/LocalizationConfig'
        owner:
          $ref: '#/components/schemas/Owner'
        status:
          type: string
          description: |
            The status of the project:

            - `ACTIVE` — Active.
            - `ARCHIVED` — Archived.
          enum:
            - ACTIVE
            - ARCHIVED
        created:
          type: string
          description: 'The UTC date and time the project was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.'
          format: date-time
    ProjectFormV1:
      required:
        - assignments_issuing_type
        - public_name
        - task_spec
      type: object
      description: The project that you want to create or modify.
      properties:
        public_name:
          type: string
          example: Elephant color
          description: The name of the project. It will be shown to Tolokers.
        public_description:
          type: string
          example: What color is the elephant in the picture?
          description: The description of the project. It will be shown to Tolokers.
        public_instructions:
          type: string
          example: |
            <p>Look at the picture and decide what color the elephant is.</p>
            You can zoom in or out using the buttons:</p> <img
            src="disc/img1.png>"
          description: The instructions for completing the task. You can use any HTML markup in the instructions.
        private_comment:
          type: string
          description: The comments that are only visible to the requester.
        task_spec:
          $ref: ./parts/api/additional.yaml#/components/schemas/TaskSpec
        assignments_issuing_type:
          type: string
          default: AUTOMATED
          enum:
            - AUTOMATED
            - MAP_SELECTOR
          description: |
            How to assign tasks:

            - `AUTOMATED` — The Toloker is assigned a task suite from the pool. You can configure the order for assigning task suites.

            - `MAP_SELECTOR` — The Toloker selects a task suite on the map. If you are using `MAP_SELECTOR`, specify the text to display in the map name and description in the assignments_issuing_view_config key:

                ```json
                "assignments_issuing_view_config": {
                  "title_template": "<task name>",
                  "description_template": "<brief description of the task>",
                  "map_provider": "GOOGLE"
                }
                ```
        assignments_issuing_view_config:
          $ref: '#/components/schemas/AssignmentsIssuingViewConfig'
        quality_control:
          $ref: '#/components/schemas/ProjectQualityControl'
        assignments_automerge_enabled:
          type: boolean
          default: false
          description: Resolve [merging identical tasks](https://toloka.ai/docs/api/tasks/#task-merge) in the project.
        max_active_assignments_count:
          type: integer
          format: int32
          description: The number of task suites the Toloker can complete simultaneously ("Active" status).
        metadata:
          type: object
          description: An object containing the metadata.
        sensitive:
          type: boolean
          description: Whether the tasks in the project contain sensitive data or not.
        localization_config:
          $ref: '#/components/schemas/LocalizationConfig'
    PageOfV1ProjectViewV1:
      type: object
      description: The list of projects and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of projects and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/ProjectViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    Company:
      type: object
      description: The details of the client registered as a company.
      properties:
        id:
          type: string
          description: The company ID.
        superintendent_id:
          type: string
          description: The ID of the client who owns the company account.
    RequesterViewV1:
      type: object
      description: The information about the client.
      properties:
        id:
          type: string
          description: The requester ID.
        balance:
          type: number
          description: The client account balance in US dollars.
        public_name:
          type: object
          description: The client name in the platform visible to Tolokers.
          properties:
            EN:
              type: string
              description: The English variant of the client name.
        company:
          $ref: '#/components/schemas/Company'
    SkillViewV1:
      type: object
      description: The detailed information about the skill.
      properties:
        id:
          type: string
          description: The skill ID.
        name:
          type: string
          description: The skill name.
        public_name:
          type: object
          description: The skill name visible to Tolokers.
        private_comment:
          type: string
          description: The comments on the skill (only visible to the requester).
        public_requester_description:
          type: object
          description: The skill description visible to Tolokers.
        hidden:
          type: boolean
          default: true
          description: |
            Access to the information about the skill (the name and value) for Tolokers:

            - `true` — Hidden (access closed).
            - `false` — Not hidden (access open).
        skill_ttl_hours:
          type: integer
          description: |
            The skill's "time to live" after the last update (in hours). The skill is removed from the Toloker's profile if the skill level hasn't been updated for the specified length of time.
          format: int64
        deprecated:
          type: boolean
          description: |
            Terminating skill support by its creator:

            - `true`— The skill is no longer supported and needs to be replaced.
            - `false` — The skill is supported and up-to-date.
        owner:
          $ref: '#/components/schemas/Owner'
        training:
          type: boolean
          description: |
            Whether the skill is related to a training pool:

            - `true` — The skill level is calculated from training pool tasks.
            - `false` — The skill isn't related to a training pool.
        created:
          type: string
          description: |
            The UTC date and time when the skill was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        global:
          type: boolean
          description: |
            The indicator of a global skill:

            - `true` — The skill is global, shows general competencies of Tolokers, and is available to all Tolokers.
            - `false` — The skill is created by the requester and can be assigned to Tolokers both manually and automatically: using quality control rules or after training.
    SkillFormV1:
      required:
        - name
      type: object
      description: The skill that you want to create or modify.
      properties:
        name:
          type: string
          description: The skill name.
          example: "my skill"
        public_name:
          type: object
          description: The skill name visible to Tolokers.
          example: {"EN": "Search relevance"}
        private_comment:
          type: string
          description: The comments on the skill (only visible to the requester).
          example: "A private comment"
        public_requester_description:
          type: object
          description: The skill description visible to Tolokers.
          example: {"EN": "Search relevance skill description"}
        hidden:
          type: boolean
          default: true
          description: |
            Access to the information about the skill (the name and value) for Tolokers:

            - `true` — Hidden (access closed).
            - `false` — Not hidden (access open).
          example: false
        skill_ttl_hours:
          type: integer
          description: The skill's "time to live" after the last update (in hours). The skill is removed from the Toloker's profile if the skill level hasn't been updated for the specified length of time.
          format: int64
          example: 36600
        deprecated:
          type: boolean
          description: |
            Terminating skill support by its creator:

            - `true` — The skill is no longer supported and needs to be replaced.
            - `false` — The skill is supported and up-to-date.
          example: false
    PageOfV1SkillViewV1:
      type: object
      description: The list of skills and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of skills and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/SkillViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    TaskSuiteViewV1:
      type: object
      description: The detailed information about the task suite.
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: The ID of the task suite.
            created:
              type: string
              description: |
                The UTC date and time when the task suite was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
              format: date-time
        - $ref: '#/components/schemas/TaskSuiteFormV1'
    TaskSuiteFormV1:
      required:
        - pool_id
        - tasks
      type: object
      description: The detailed information about the task suite.
      properties:
        pool_id:
          type: string
          description: The ID of the pool that tasks are uploaded to.
        tasks:
          type: array
          description: Data for the tasks.
          items:
            $ref: '#/components/schemas/RawTask'
        overlap:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            **Required** if `allow_defaults` is set to `false` when creating a task suite and the overlap is not specified in the [pool parameters](#post-/pools) (the `defaults.​default_​overlap_for_​new_task_suites` key).

            The task suite overlap.

            <aside class="warning">Please note that the overlap you set when creating task suites has priority over the overlap you set during the <a href="#post-/pools">pool creation</a>.</aside>
          format: int64
        infinite_overlap:
          type: boolean
          description: |
            Assigning a task suite with infinite overlap. This option is used, for instance, for suites of training tasks when you want to assign them to all Tolokers:

            - `true` — Use infinite overlap.
            - `false` — Use the overlap that is set for the task suite or pool.
        reserved_for:
          uniqueItems: true
          type: array
          description: The IDs of Tolokers who will have access to the task suites.
          items:
            type: string
        unavailable_for:
          uniqueItems: true
          type: array
          description: The IDs of Tolokers who shouldn't have access to the task suite.
          items:
            type: string
        issuing_order_override:
          maximum: 99999.99999
          exclusiveMaximum: false
          minimum: -99999.99999
          exclusiveMinimum: false
          type: number
          default: 0
          description: |
            The priority of a task suite among other suites in the pool. Defines the order in which task suites are assigned to Tolokers. The larger the parameter value, the higher the priority.

            This parameter can be used if the pool has `issue_task_suites_in_creation_order` is set to `true`.
          format: double
        mixed:
          type: boolean
          description: |
            The type of operation for creating a task suite:

            - `true` — Automatically with the "smart mixing" option (for more information, see the [documentation](https://toloka.ai/docs/guide/task_upload/)).
            - `false` — Manually.
        automerged:
          type: boolean
          description: |
            Whether a task suite is created after merging tasks. Value:

            - `true` — The task suite is generated as a result of merging identical tasks.
            - `false` — A standard task suite created by "smart mixing" or by the requester.
        remaining_overlap:
          type: integer
          description: |
            The remaining overlap for each task. For example, if the task has an overlap of `5` but was completed by two people, the `remaining_overlap` value is `3`.

            If the task is under review or active, the key is `0`.
          format: int64
    PageOfV1TaskSuiteViewV1:
      type: object
      description: The list of task suites and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of task suites and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/TaskSuiteViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    PageOfTaskSuiteV1:
      type: object
      description: The list of the created task suites and their properties together with validation errors.
      properties:
        items:
          type: object
          description: An object with the list of the created task suites.
          properties:
            <n>:
              $ref: '#/components/schemas/TaskSuiteViewV1'
        validation_errors:
          type: object
          description: An object with the errors in task suites. Returned if the request has the parameter `skip_invalid_items=true`.
    PageOfBonusV1:
      type: object
      description: The list of the issued bonuses and their properties together with validation errors.
      properties:
        items:
          type: object
          description: An object with the list of the issued bonuses.
          properties:
            <n>:
              $ref: '#/components/schemas/UserBonusViewV1'
        validation_errors:
          type: object
          description: An object with the errors in bonuses. Returned if the request has the parameter `skip_invalid_items=true`.
    TaskSuitePatchV1:
      required:
        - infinite_overlap
      type: object
      description: The task suite properties that you want to change.
      properties:
        overlap:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            **Required** if `allow_defaults` is set to `false` when creating a task suite and the overlap is not specified in the [pool parameters](#post-/pools) (the `defaults.​default_​overlap_for_​new_task_suites` key).

            The task suite overlap.

            <aside class="warning">Please note that the overlap you set when creating task suites has priority over the overlap you set during the <a href="#post-/pools">pool creation</a>.</aside>
          format: int64
          example: 3
        infinite_overlap:
          type: boolean
          description: |
            Assigning a task suite with infinite overlap. This option is used, for instance, for suites of training tasks when you want to assign them to all Tolokers:

            - `true` — Use infinite overlap.
            - `false` — Use the overlap that is set for the task suite or pool.
          example: false
        issuing_order_override:
          maximum: 99999.99999
          exclusiveMaximum: false
          minimum: -99999.99999
          exclusiveMinimum: false
          type: number
          default: 0
          description: |
            The priority of a task suite among other suites in the pool. Defines the order in which task suites are assigned to Tolokers. The larger the parameter value, the higher the priority.

            This parameter can be used if the pool has `issue_task_suites_in_creation_order` set to `true`.
          format: double
          example: 10
    TaskSuiteOverlapPatchV1:
      type: object
      description: The task suite overlap parameters.
      properties:
        overlap:
          maximum: 30000
          minimum: 0
          type: integer
          description: |
            **Required** if `allow_defaults` is set to `false` when creating a task suite and the overlap is not specified in the [pool parameters](#post-/pools) (the `defaults.​default_​overlap_for_​new_task_suites` key).

            The task suite overlap value.
          format: int64
          example: 0
    TaskFormV1:
      required:
        - pool_id
      type: object
      description: The detailed information about the task.
      properties:
        input_values:
          type: object
          description: |
            The input data for a task. List of pairs:

              ```json
              "<ID of field 1>": "<value of field 1>",
              "<ID of field 2>": "<value of field 2>",
              ...
              "<ID of field N>": "<value of field N>"
              ```

              <aside class="warning">The total size of all <code>input_values</code> fields in a single request mustn't exceed <strong>1,048,576</strong> bytes.</aside>
        known_solutions:
          type: array
          description: |
            The correct responses to [control](https://toloka.ai/docs/glossary#control-task) and [training](https://toloka.ai/docs/glossary#training-task) tasks.

            You can specify several options for a correct task response.

            If one option is more correct than another, you can assign different weights to the response options. To do this, use the `correctness_weight key`.
          items:
            $ref: '#/components/schemas/RawKnownSolution'
        message_on_unknown_solution:
          type: string
          description: The hint for the task (for training tasks).
        baseline_solutions:
          type: array
          description: |
            The preliminary responses. This data simulates Toloker responses when calculating `confidence` in a response. It is used in dynamic overlap (also known as incremental relabeling or IRL) and aggregation of results by skill.

            Define `output_values` and `confidence_weight` for each preliminary response.

            For example, you ask Tolokers to label whether an image shows a cat or a dog. Suppose your neural network already determined that the image might show a dog with a probability of 80% and a cat with a probability of 40%. Let's say you set dynamic overlap from 1 to 3 and the minimum response confidence at 85%.

            If the Toloker answers "Dog" and the confidence in their response is high, the overlap most likely won't increase because one response is enough. If the Toloker answers "Cat", the confidence is most likely not high enough and the overlap will increase further.

            <aside class="warning">Can't be used when <a href="#post-/task-suites">creating a task suite</a>: an error with code <code>400</code> saying <code>VALUE_NOT_ALLOWED</code> will be returned to your request.</aside>
          items:
            $ref: '#/components/schemas/RawBaselineSolution'
        localization_config:
          $ref: '#/components/schemas/LocalizationConfig'
        pool_id:
          type: string
          description: The ID of the pool that the task is uploaded to.
        overlap:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            **Required** if `allow_defaults` is set to `false` when creating tasks and the overlap is not specified in the [pool parameters](#post-/pools) (the `defaults.default_overlap_for_new_tasks` key).

            The task overlap.

            <aside class="warning">Please note that the overlap you set when uploading tasks has priority over the overlap you set during the <a href="#post-/pools">pool creation</a>.</aside>
          format: int64
        infinite_overlap:
          type: boolean
          default: false
          description: |
            Assigns tasks with an infinite overlap. For example, you can use this for training tasks when you want to assign them to all Tolokers:

            - `true` — Use the infinite overlap.
            - `false` — Use the overlap that is set for the task or pool.
        reserved_for:
          uniqueItems: true
          type: array
          description: The IDs of Tolokers who will have access to the task.
          items:
            type: string
        unavailable_for:
          uniqueItems: true
          type: array
          description: The IDs of Tolokers who shouldn't have access to the task.
          items:
            type: string
    TaskViewV1:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: The task ID.
            created:
              type: string
              description: |
                The UTC date and time when the task suite was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
              format: date-time
            origin_task_id:
              type: string
              description: The ID of a task from another pool from which this task was copied for majority vote verification.
            remaining_overlap:
              type: integer
              format: int64
              description: The remaining number of Tolokers to whom this task is available.
        - $ref: '#/components/schemas/TaskFormV1'
    PageOfV1TaskViewV1:
      type: object
      description: The list of tasks and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of tasks and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/TaskViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    TaskPatchV1:
      type: object
      description: The task properties that you want to change.
      properties:
        infinite_overlap:
          type: boolean
          default: false
          description: |
            Assigns tasks with an infinite overlap. For example, you can use this for training tasks when you want to assign them to all Tolokers:

            - `true` — Use infinite overlap.

            - `false` — Use the overlap that is set for the task or pool.
        overlap:
          maximum: 30000
          minimum: 1
          type: integer
          description: |
            **Required** if `allow_defaults` is set to `false` when creating tasks and the overlap is not specified in the [pool parameters](#get-/pools/-id-) (the `defaults.default_overlap_for_new_tasks` key).

            The task overlap.

            <aside class="warning">Please note that the overlap you set when uploading tasks has priority over the overlap you set during the <a href="#post-/pools">pool creation</a>.</aside>
          format: int64
        baseline_solutions:
          type: array
          description: |
            The preliminary responses. This data simulates Toloker responses when calculating `confidence` in a response. It is used in dynamic overlap (also known as incremental relabeling or IRL) and aggregation of results by skill.

            Define `output_values` and `confidence_weight` for each preliminary response.

            For example, you ask Tolokers to label whether an image shows a cat or a dog. Suppose your neural network already determined that the image might show a dog with a probability of 80% and a cat with a probability of 40%. Let's say you set dynamic overlap from 1 to 3 and the minimum response confidence at 85%.

            If the Toloker answers "Dog" and the confidence in their response is high, the overlap most likely won't increase because one response is enough. If the Toloker answers "Cat", the confidence is most likely not high enough and the overlap will increase further.

            <aside class="warning">Can't be used when <a href="#post-/task-suites">creating a task suite</a>: an error with code <code>400</code> saying <code>VALUE_NOT_ALLOWED</code> will be returned to your request.</aside>
          items:
            $ref: '#/components/schemas/RawBaselineSolution'
        message_on_unknown_solution:
          type: string
          description: The hint for the task (for training tasks).
        known_solutions:
          type: array
          description: |
            The correct responses to [control](https://toloka.ai/docs/glossary#control-task) and [training](https://toloka.ai/docs/glossary#training-task) tasks.

            You can specify several options for a correct task response.

            If one option is more correct than another, you can assign different weights to the response options. To do this, use the `correctness_weight` key.
          items:
            $ref: '#/components/schemas/RawKnownSolution'
    TaskOverlapPatchV1:
      type: object
      description: The task overlap parameters.
      properties:
        overlap:
          description: The task overlap value.
          maximum: 30000
          minimum: 0
          type: integer
          format: int64
          example: 3
        infinite_overlap:
          description: |
            Assigns tasks with an infinite overlap. For example, you can use this for training tasks when you want to assign them to all Tolokers:

            - `true` — Use the infinite overlap.
            - `false` — Use the overlap that is set for the task or pool.
          type: boolean
          example: false
    TrainingViewV1:
      type: object
      description: The detailed information about the training pool.
      properties:
        id:
          type: string
          description: The ID of the training pool.
        project_id:
          type: string
          description: The ID of the project that the training pool was created for.
        private_name:
          type: string
          description: The name of the training pool (only visible to the requester).
        inherited_instructions:
          type: boolean
          default: false
          description: Indicates whether to use the project instructions. To provide separate instructions for the training, enter it in `public_instructions`.
        public_instructions:
          type: string
          description: The instructions for completing a training task. You can use any HTML markup.
        may_contain_adult_content:
          type: boolean
          description: Whether the tasks contain adult content.
        assignment_max_duration_seconds:
          maximum: 2147483647
          minimum: 5
          type: integer
          description: The time allowed for completing a task suite, in seconds. We recommend allowing no more than 60 seconds per task suite (including the time for loading the page and submitting responses).
          format: int64
        mix_tasks_in_creation_order:
          type: boolean
          default: true
          description: |
            Whether the training tasks are issued in their upload order:

            - `true` — Tasks are grouped into task suites in the order of rows in the uploaded file (top-to-bottom).
            - `false` — Tasks are taken at random.
        shuffle_tasks_in_task_suite:
          type: boolean
          default: true
          description: |
            Whether the training tasks are shuffled within each task suite:

            - `true` — Yes.
            - `false` — No, they are listed in their upload order.
        training_tasks_in_task_suite_count:
          maximum: 500
          minimum: 0
          type: integer
          description: The number of training tasks per suite.
          format: int32
        task_suites_required_to_pass:
          maximum: 500
          minimum: 0
          type: integer
          description: The number of task suites the Toloker needs to complete to get a skill and access the general tasks.
          format: int32
        retry_training_after_days:
          minimum: 1
          type: integer
          description: The number of days until retry becomes available.
          format: int64
        metadata:
          type: object
          description: An object containing the metadata.
        owner:
          $ref: '#/components/schemas/Owner'
        status:
          type: string
          description: |
            The training pool status:

            - `OPEN` — Open.
            - `CLOSED` — Closed.
            - `ARCHIVED` — Archived.
          enum:
            - OPEN
            - CLOSED
            - ARCHIVED
            - LOCKED
        last_close_reason:
          type: string
          description: |
            The reason for closing the pool the last time:

            - `MANUAL` — Closed by the requester.
            - `EXPIRED` — Reached the date and time set in `will_expire`.
            - `COMPLETED` — Closed automatically because all the pool tasks were completed.
            - `NOT_ENOUGH_BALANCE` — Closed automatically because the Toloka account ran out of funds.
            - `ASSIGNMENTS_LIMIT_EXCEEDED` — Closed automatically because it exceeded the limit on assigned task suites (2 million maximum).
            - `BLOCKED` — Closed automatically because the requester's account was blocked by a Toloka administrator.
            - `FOR_UPDATE` — The pool is closed for editing.
          enum:
            - MANUAL
            - EXPIRED
            - COMPLETED
            - NOT_ENOUGH_BALANCE
            - ASSIGNMENTS_LIMIT_EXCEEDED
            - BLOCKED
            - FOR_UPDATE
        created:
          type: string
          description: |
            The UTC date and time when the pool was created, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        last_started:
          type: string
          description: |
            The UTC date and time when the pool was last started, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        last_stopped:
          type: string
          description: |
            The UTC date and time when the pool was last stopped, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
    TrainingFormV1:
      required:
        - inherited_instructions
        - private_name
        - project_id
        - training_tasks_in_task_suite_count
      type: object
      description: The training pool that you want to create or modify.
      properties:
        project_id:
          type: string
          description: The ID of the project that the training pool was created for.
          example: 118252
        private_name:
          type: string
          description: The name of the training pool (only visible to the requester).
          example: Simple training pool
        inherited_instructions:
          type: boolean
          description: Indicates whether to use the project instructions. To provide separate instructions for the training, enter it in `public_instructions`.
          example: true
        public_instructions:
          type: string
          description: The instructions for completing a training task. You can use any HTML markup.
          example: "Unpaid selection for a project: 10 tasks, 90% threshold."
        may_contain_adult_content:
          type: boolean
          description: Whether the tasks contain adult content.
        assignment_max_duration_seconds:
          maximum: 2147483647
          minimum: 5
          type: integer
          format: int64
          description: The time allowed for completing a task suite, in seconds. We recommend allowing no more than 60 seconds per task suite (including the time for loading the page and submitting responses).
          example: 600
        mix_tasks_in_creation_order:
          type: boolean
          description: |
            Whether the training tasks are issued in their upload order:

            - `true` — Tasks are grouped into task suites in the order of rows in the uploaded file (top-to-bottom).
            - `false` — Tasks are taken at random.
          example: true
        shuffle_tasks_in_task_suite:
          type: boolean
          description: |
            Whether the training tasks are shuffled within each task suite:

            - `true` — Yes.
            - `false` — No, they are listed in their upload order.
          example: true
        training_tasks_in_task_suite_count:
          maximum: 500
          minimum: 0
          type: integer
          format: int32
          description: The number of training tasks per suite.
          example: 3
        task_suites_required_to_pass:
          maximum: 500
          minimum: 0
          type: integer
          format: int32
          description: The number of task suites the Toloker needs to complete to get a skill and access the general tasks.
          example: 1
        retry_training_after_days:
          minimum: 1
          type: integer
          format: int64
          description: The number of days until retry becomes available.
          example: 7
        metadata:
          type: object
          description: An object containing the metadata.
    PageOfV1TrainingViewV1:
      type: object
      description: The list of training pools and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of training pools and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/TrainingViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    UserBonusFormV1:
      required:
        - amount
        - user_id
      type: object
      description: The detailed information about the bonus.
      properties:
        user_id:
          type: string
          description: The ID of the Toloker for whom you issued the bonus.
          example: a1b0b42923c429daa2c764d7ccfc364d
        amount:
          minimum: 0.005
          exclusiveMinimum: false
          type: number
          description: The amount of the bonus in US dollars.
          example: 0.5
        private_comment:
          type: string
          description: The comments that are only visible to the requester.
          example: "Good job!"
        public_title:
          type: object
          description: |
            The subject of the message for the Toloker. You can enter it in multiple languages (the message will be sent in the Toloker's language).

            The format:

            ```json
            {
              "EN": "Title in English",
              "DE": "Titel auf Deutsch"
            }
            ```
          example: {"EN": "Perfect job!"}
        public_message:
          type: object
          description: |
            The message text for the Toloker. You can enter it in multiple languages (the message will be sent in the Toloker's language).

            The format:

            ```json
            {
              "EN": "Message text in English",
              "DE": "Nachrichtentext in Deutsch"
            }
            ```
          example: {"EN": "You are the best!"}
        without_message:
          type: boolean
          default: false
          description: |
            Allows you not to send a bonus message to the Toloker.

            To issue a bonus without a message, specify `null` for `public_title` and `public_message`, and `true` for `without_message`.
          example: false
        assignment_id:
          type: string
          description: The ID of the Toloker's response to the task a bonus is issued for.
          example: 000015fccc--63bfc4c358d7a46c32a7b233
    UserBonusViewV1:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserBonusFormV1'
        - type: object
          properties:
            id:
              type: string
              description: The bonus ID.
            created:
              type: string
              description: |
                The UTC date and time when the bonus was awarded, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`
              format: date-time
    PageOfV1UserBonusViewV1:
      type: object
      description: The list of bonuses and their properties in the `items` array.
      properties:
        items:
          type: array
          description: The list of bonuses and their properties in the `items` array.
          items:
            $ref: '#/components/schemas/UserBonusViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    UserMetadataAttributes:
      type: object
      description: The Toloker attributes determined based on their phone number, IP address, and device.
      properties:
        country_by_phone:
          type: string
          description: The Toloker country determined based on the phone number. The two-letter country code from the list of the [regions](https://toloka.ai/docs/api/regions).
        country_by_ip:
          type: string
          description: The Toloker country determined based on the IP address. The two-letter country code from the list of the [regions](https://toloka.ai/docs/api/regions).
        client_type:
          type: string
          description: |
            The client which the Toloker uses to access the platform.

            Available values:

            - `TOLOKA_APP` — The Toloker uses the mobile application to access the platform.
            - `BROWSER` — The Toloker uses a browser to access the platform.
        user_agent_type:
          type: string
          description: |
            The user agent type which the client application uses to identify itself.

            Available values:

            - `BROWSER` — The desktop browser user agent.
            - `MOBILE_BROWSER` — The mobile browser user agent.
            - `OTHER` — User agents which could not be identified as either desktop or mobile browsers. Normally, the Toloka mobile application will identify itself as `OTHER`.
        device_category:
          type: string
          description: |
            The category of devices which the Toloker uses to access the platform.

            Available values:

            - `PERSONAL_COMPUTER` — A personal computer or an Apple Mac-family device.
            - `SMARTPHONE` — A mobile phone with one of the supported operating systems.
            - `TABLET` — A tablet device.
            - `WEARABLE_COMPUTER` — A wearable device, such as a smart watch and other similar devices.
        os_family:
          type: string
          description: |
            The operating system family which the Toloker uses on their device.

            Available values:

            - `ANDROID` — Android mobile operating system based on a modified version of the Linux kernel, designed primarily for touchscreen mobile devices.
            - `BLACKBERRY` — BlackBerry OS mobile operating system developed by BlackBerry Limited for its BlackBerry smartphone devices.
            - `BSD` — An operating system based on Research Unix, developed and distributed by the CSRG, and its open-source descendants like FreeBSD, OpenBSD, NetBSD, and DragonFly BSD.
            - `IOS` — iOS mobile operating system developed by Apple Inc. exclusively for its mobile devices.
            - `LINUX` — A family of open-source Unix-like operating systems based on the Linux kernel.
            - `MAC_OS` — Classic Mac OS operating system developed by Apple Inc. before 2001 for the Macintosh family of personal computers.
            - `OS_X` — macOS operating system developed by Apple Inc. since 2001 for Mac computers.
            - `WINDOWS` — Microsoft Windows operating system developed and marketed by Microsoft for personal computers.
        os_version:
          type: number
          format: double
          description: The version of the operating system installed on the device which the Toloker uses to access the platform. The version consists of major and minor version numbers, for example, `14.4`.
        os_version_major:
          type: integer
          format: int64
          description: The major version of the operating system installed on the device which the Toloker uses to access the platform.
        os_version_minor:
          type: integer
          format: int64
          description: The minor version of the operating system installed on the device which the Toloker uses to access the platform.
        os_version_bugfix:
          type: integer
          format: int64
          description: The build number or the bugfix version of the operating system installed on the device which the Toloker uses to access the platform.
    UserMetadataViewV1:
      type: object
      description: The detailed information about the Toloker.
      properties:
        id:
          type: string
          description: The ID of the Toloker for whom you get the detailed information.
        country:
          type: string
          description: The country which the Toloker selected when registering.
        languages:
          type: array
          description: The list of languages the Toloker specified in their profile.
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/UserMetadataAttributes'
        adult_allowed:
          type: boolean
          description: Whether or not the Toloker agreed to complete tasks which contain adult content.
    UserRestrictionViewV1:
      type: object
      description: The detailed information about the ban.
      properties:
        id:
          type: string
          description: The ID of the ban.
          example: 19038
        scope:
          type: string
          description: |
            The scope of the ban:

            - `ALL_PROJECTS` — All the requester's projects.
            - `POOL` — A pool (specify the `pool_id`).
            - `PROJECT` — A single project (specify the `project_id`).
            - `SYSTEM` — Tolokers that performed the requester's tasks but were [banned on the platform](https://toloka.ai/docs/guide/ban/?form-source=api-ban#ban-platform).
          enum:
            - ALL_PROJECTS
            - POOL
            - PROJECT
            - SYSTEM
          example: ALL_PROJECTS
        user_id:
          type: string
          description: The ID of the banned Toloker.
          example: 1ad097faba0eff85a04fe30bc04d53db
        project_id:
          type: string
          description: |
            **Required** if `scope=PROJECT`.

            The ID of the project that is blocked.
        pool_id:
          type: string
          description: |
            **Required** if `scope=POOL`.

            The ID of the pool that is blocked.
        private_comment:
          type: string
          maximum: 499
          description: The comments with the reason for blocking access.
        will_expire:
          type: string
          description: |
            The UTC date and time when access will be restored, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        created:
          type: string
          description: |
            The UTC date and time of the ban, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
          example: 2022-07-19T08:44:34.906
    PageOfV1UserRestrictionViewV1:
      type: object
      description: The list of bans and their properties in the `items` array.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRestrictionViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    UserRestrictionFormV1:
      required:
        - scope
        - user_id
      type: object
      description: The ban object to set to a Toloker.
      properties:
        scope:
          type: string
          description: |
            The scope of the ban:

            - `ALL_PROJECTS` — All the requester's projects.
            - `POOL` — A pool (specify the `pool_id`).
            - `PROJECT` — A single project (specify the `project_id`).
            - `SYSTEM` — Tolokers that performed the requester's tasks but were [banned on the platform](https://toloka.ai/docs/guide/ban/?form-source=api-ban#ban-platform).
          enum:
            - ALL_PROJECTS
            - POOL
            - PROJECT
            - SYSTEM
          example: PROJECT
        user_id:
          type: string
          description: The ID of the banned Toloker.
          example: f25a5f41-94e8-49bf-977f-3611087a16b3
        project_id:
          type: string
          description: |
            **Required** if `scope=PROJECT`.

            The ID of the project that is blocked.
          example: 10
        pool_id:
          type: string
          description: |
            **Required** if `scope=POOL`.

            The ID of the pool that is blocked.
        private_comment:
          type: string
          maximum: 499
          description: The comments with the reason for blocking access.
          example: "Many mistakes"
        will_expire:
          type: string
          format: date-time
          description: |
            The UTC date and time when access will be restored, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          example: "2016-03-28T18:08:07"
    UserSkillViewV1:
      required:
        - skill_id
        - user_id
        - value
      type: object
      description: The detailed information about the Toloker skill.
      properties:
        id:
          type: string
          description: ID of the Toloker's skill, assigned to the "skill-Toloker" pair.
        skill_id:
          type: string
          description: The skill ID.
        user_id:
          type: string
          description: The Toloker ID.
        value:
          maximum: 100
          minimum: 0
          type: integer
          description: The integer value of that skill (`exact_value`, rounded to the nearest integer).
          format: int32
        exact_value:
          maximum: 100
          minimum: 0
          type: number
          description: The fractional value of the skill.
        created:
          type: string
          description: |
            The UTC date and time when the Toloker was first assigned the skill with the specified value, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
        modified:
          type: string
          description: |
            The UTC date and time when the Toloker's skill level changed, in the ISO 8601 format: `YYYY-MM-DDThh:mm:ss[.sss]`.
          format: date-time
    PageOfV1UserSkillViewV1:
      type: object
      description: The information about Toloker skills in the `items` array.
      properties:
        items:
          type: array
          description: The information about Toloker skills in the `items` array.
          items:
            $ref: '#/components/schemas/UserSkillViewV1'
        has_more:
          $ref: './parts/api/additional.yaml#/components/schemas/HasMore'
    UserSkillFormV1:
      required:
        - skill_id
        - user_id
        - value
      type: object
      description: The Toloker skill properties that you want to change.
      properties:
        skill_id:
          type: string
          description: The skill ID.
          example: 11051
        user_id:
          type: string
          description: The Toloker ID.
          example: 1ad097faba0eff85a04fe30bc04d53db
        value:
          maximum: 100
          minimum: 0
          type: number
          description: The fractional value of the skill.
          example: 50
        reason:
          type: string
          description: The reason for changing or assigning a skill.
          example: High-quality performance of tasks
